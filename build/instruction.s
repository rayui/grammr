;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_strcpy
	.import		_strlen
	.import		_strncpy
	.import		_malloc
	.import		_cprintf
	.import		_toLowerCaseContains
	.import		_toLowerCaseCompare
	.export		_inst_get_instruction
	.export		_parseNumArgsFromInstructions
	.export		_createInstructionList
	.export		_createAction
	.export		_findActionById
	.export		_findActionByName
	.export		_findActionByNameAndItem
	.export		_findDefaultActionByName
	.import		_actions

.segment	"RODATA"

L013D:
	.byte	$C6,$CF,$D5,$CE,$C4,$20,$C1,$C3,$D4,$C9,$CF,$CE,$20,$C2,$D9,$20
	.byte	$C9,$C4,$3A,$20,$25,$44,$20,$46,$4F,$52,$20,$25,$53,$0A,$0D,$00
L0025:
	.byte	$49,$49,$00
L002C:
	.byte	$48,$45,$00
L0033:
	.byte	$4E,$54,$00
L003A:
	.byte	$49,$46,$00
L0041:
	.byte	$4C,$53,$00
L0048:
	.byte	$49,$41,$00
L004F:
	.byte	$49,$44,$00
L0056:
	.byte	$52,$54,$00
L005D:
	.byte	$47,$54,$00
L0064:
	.byte	$4C,$42,$00
L006B:
	.byte	$50,$52,$00
L0072:
	.byte	$50,$44,$00
L0079:
	.byte	$50,$45,$00
L0080:
	.byte	$50,$49,$00
L0087:
	.byte	$50,$4C,$00
L008E:
	.byte	$41,$43,$00
L0098:
	.byte	$24,$D3,$00
L009E:
	.byte	$24,$CF,$00
L001E:
	.byte	$4C,$49,$00
L0017:
	.byte	$45,$51,$00

; ---------------------------------------------------------------
; int __near__ inst_get_instruction (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_get_instruction: near

.segment	"BSS"

L000C:
	.res	3,$00

.segment	"CODE"

	jsr     pushax
	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldx     #$00
	lda     #$02
	jsr     _strncpy
	lda     #$00
	sta     L000C+3
	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0017)
	ldx     #>(L0017)
	jsr     _toLowerCaseCompare
	tax
	beq     L0014
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0014:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L001E)
	ldx     #>(L001E)
	jsr     _toLowerCaseCompare
	tax
	beq     L001B
	ldx     #$00
	lda     #$02
	jmp     incsp2
L001B:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0025)
	ldx     #>(L0025)
	jsr     _toLowerCaseCompare
	tax
	beq     L0022
	ldx     #$00
	lda     #$03
	jmp     incsp2
L0022:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L002C)
	ldx     #>(L002C)
	jsr     _toLowerCaseCompare
	tax
	beq     L0029
	ldx     #$00
	lda     #$04
	jmp     incsp2
L0029:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0033)
	ldx     #>(L0033)
	jsr     _toLowerCaseCompare
	tax
	beq     L0030
	ldx     #$00
	lda     #$05
	jmp     incsp2
L0030:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L003A)
	ldx     #>(L003A)
	jsr     _toLowerCaseCompare
	tax
	beq     L0037
	ldx     #$00
	lda     #$06
	jmp     incsp2
L0037:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0041)
	ldx     #>(L0041)
	jsr     _toLowerCaseCompare
	tax
	beq     L003E
	ldx     #$00
	lda     #$07
	jmp     incsp2
L003E:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0048)
	ldx     #>(L0048)
	jsr     _toLowerCaseCompare
	tax
	beq     L0045
	ldx     #$00
	lda     #$08
	jmp     incsp2
L0045:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L004F)
	ldx     #>(L004F)
	jsr     _toLowerCaseCompare
	tax
	beq     L004C
	ldx     #$00
	lda     #$09
	jmp     incsp2
L004C:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0056)
	ldx     #>(L0056)
	jsr     _toLowerCaseCompare
	tax
	beq     L0053
	ldx     #$00
	lda     #$0A
	jmp     incsp2
L0053:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L005D)
	ldx     #>(L005D)
	jsr     _toLowerCaseCompare
	tax
	beq     L005A
	ldx     #$00
	lda     #$0B
	jmp     incsp2
L005A:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0064)
	ldx     #>(L0064)
	jsr     _toLowerCaseCompare
	tax
	beq     L0061
	ldx     #$00
	lda     #$0C
	jmp     incsp2
L0061:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L006B)
	ldx     #>(L006B)
	jsr     _toLowerCaseCompare
	tax
	beq     L0068
	ldx     #$00
	lda     #$0D
	jmp     incsp2
L0068:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0072)
	ldx     #>(L0072)
	jsr     _toLowerCaseCompare
	tax
	beq     L006F
	ldx     #$00
	lda     #$0E
	jmp     incsp2
L006F:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0079)
	ldx     #>(L0079)
	jsr     _toLowerCaseCompare
	tax
	beq     L0076
	ldx     #$00
	lda     #$0F
	jmp     incsp2
L0076:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0080)
	ldx     #>(L0080)
	jsr     _toLowerCaseCompare
	tax
	beq     L007D
	ldx     #$00
	lda     #$10
	jmp     incsp2
L007D:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L0087)
	ldx     #>(L0087)
	jsr     _toLowerCaseCompare
	tax
	beq     L0084
	ldx     #$00
	lda     #$11
	jmp     incsp2
L0084:	lda     #<(L000C)
	ldx     #>(L000C)
	jsr     pushax
	lda     #<(L008E)
	ldx     #>(L008E)
	jsr     _toLowerCaseCompare
	tax
	beq     L000A
	ldx     #$00
	lda     #$12
	jmp     incsp2
L000A:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ parseNumArgsFromInstructions (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_parseNumArgsFromInstructions: near

.segment	"BSS"

L0093:
	.res	1,$00

.segment	"CODE"

	jsr     pushax
	lda     #$00
	sta     L0093
	jsr     pushw0sp
	lda     #<(L0098)
	ldx     #>(L0098)
	jsr     _toLowerCaseContains
	tax
	beq     L0095
	lda     L0093
	clc
	adc     #$01
	sta     L0093
L0095:	jsr     pushw0sp
	lda     #<(L009E)
	ldx     #>(L009E)
	jsr     _toLowerCaseContains
	tax
	beq     L014B
	lda     L0093
	clc
	adc     #$01
	sta     L0093
	ldx     #$00
L014B:	lda     L0093
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; __near__ struct InstructionList * __near__ createInstructionList (int, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_createInstructionList: near

.segment	"BSS"

L00A3:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	lda     #$46
	jsr     _malloc
	sta     L00A3
	stx     L00A3+1
	cpx     #$00
	bne     L00A6
	cmp     #$00
	jeq     incsp6
L00A6:	lda     L00A3
	sta     ptr1
	lda     L00A3+1
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L00A3
	ldx     L00A3+1
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     _strcpy
	lda     L00A3
	ldx     L00A3+1
	ldy     #$22
	jsr     incaxy
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcpy
	lda     L00A3
	sta     ptr1
	lda     L00A3+1
	sta     ptr1+1
	lda     #$00
	ldy     #$42
	sta     (ptr1),y
	iny
	sta     (ptr1),y
	lda     L00A3
	ldx     L00A3+1
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ struct Actions * __near__ createAction (unsigned char, __near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_createAction: near

.segment	"BSS"

L00B6:
	.res	2,$00
L00B9:
	.res	2,$00

.segment	"CODE"

	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	jsr     _strlen
	sta     L00B6
	stx     L00B6+1
	ldx     #$00
	lda     #$27
	jsr     _malloc
	sta     L00B9
	stx     L00B9+1
	cpx     #$00
	bne     L00BC
	cmp     #$00
	jeq     incsp6
L00BC:	lda     L00B9
	sta     ptr1
	lda     L00B9+1
	sta     ptr1+1
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
	lda     L00B9
	ldx     L00B9+1
	jsr     incax1
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	jsr     _strcpy
	lda     L00B9
	ldx     L00B9+1
	jsr     pushax
	lda     L00B6
	ldx     L00B6+1
	jsr     incax1
	jsr     _malloc
	ldy     #$23
	jsr     staxspidx
	lda     L00B9
	ldx     L00B9+1
	iny
	jsr     pushwidx
	ldy     #$04
	jsr     ldaxysp
	jsr     _strcpy
	lda     L00B9
	sta     ptr1
	lda     L00B9+1
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	ldy     #$22
	sta     (ptr1),y
	lda     L00B9
	ldx     L00B9+1
	ldy     #$24
	jsr     ldaxidx
	clc
	adc     L00B6
	sta     ptr1
	txa
	adc     L00B6+1
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     L00B9
	sta     ptr1
	lda     L00B9+1
	sta     ptr1+1
	tya
	ldy     #$25
	sta     (ptr1),y
	iny
	sta     (ptr1),y
	lda     L00B9
	ldx     L00B9+1
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ struct Actions * __near__ findActionById (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findActionById: near

.segment	"BSS"

L00EE:
	.res	2,$00
L00EF:
	.res	2,$00

.segment	"CODE"

	jsr     pusha
	lda     _actions
	sta     L00EF
	lda     _actions+1
	jmp     L014D
L00F4:	lda     L00EF
	ldx     L00EF+1
	ldy     #$26
	jsr     ldaxidx
	sta     L00EE
	stx     L00EE+1
	lda     L00EF
	sta     ptr1
	lda     L00EF+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     (sp),y
	bne     L00FD
	lda     L00EF
	ldx     L00EF+1
	jmp     incsp1
L00FD:	lda     L00EE
	sta     L00EF
	lda     L00EE+1
L014D:	sta     L00EF+1
	lda     L00EF
	ora     L00EF+1
	bne     L00F4
	tax
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; __near__ struct Actions * __near__ findActionByName (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findActionByName: near

.segment	"BSS"

L00D5:
	.res	2,$00
L00D6:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	lda     _actions
	sta     L00D6
	lda     _actions+1
	jmp     L014E
L00DB:	lda     L00D6
	ldx     L00D6+1
	ldy     #$26
	jsr     ldaxidx
	sta     L00D5
	stx     L00D5+1
	lda     L00D6
	ldx     L00D6+1
	jsr     incax1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	tax
	beq     L00E4
	lda     L00D6
	ldx     L00D6+1
	jmp     incsp2
L00E4:	lda     L00D5
	sta     L00D6
	lda     L00D5+1
L014E:	sta     L00D6+1
	lda     L00D6
	ora     L00D6+1
	bne     L00DB
	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; __near__ struct Actions * __near__ findActionByNameAndItem (__near__ struct Item *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findActionByNameAndItem: near

.segment	"BSS"

L0120:
	.res	1,$00
L0129:
	.res	2,$00
L012A:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	lda     #$00
	sta     L0120
	tax
L0152:	lda     L0120
	cmp     #$05
	jcs     L0153
	lda     _actions
	sta     L012A
	lda     _actions+1
	jmp     L0151
L012F:	lda     L012A
	ldx     L012A+1
	ldy     #$26
	jsr     ldaxidx
	sta     L0129
	stx     L0129+1
	lda     L012A
	sta     ptr1
	lda     L012A+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	jsr     incax4
	ldy     L0120
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	cpx     sreg+1
	bne     L0141
	cmp     sreg
	bne     L0141
	lda     #<(L013D)
	ldx     #>(L013D)
	jsr     pushax
	lda     L012A
	sta     ptr1
	lda     L012A+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	ldy     #$07
	jsr     ldaxysp
	jsr     pushw
	ldy     #$06
	jsr     _cprintf
	lda     L012A
	ldx     L012A+1
	jsr     incax1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	tax
	beq     L0141
	lda     L012A
	ldx     L012A+1
	jmp     incsp4
L0141:	lda     L0129
	sta     L012A
	lda     L0129+1
L0151:	sta     L012A+1
	lda     L012A
	ora     L012A+1
	jne     L012F
	lda     L0120
	clc
	adc     #$01
	sta     L0120
	jmp     L0152
L0153:	lda     #$00
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; __near__ struct Actions * __near__ findDefaultActionByName (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findDefaultActionByName: near

.segment	"BSS"

L0105:
	.res	2,$00
L0106:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	lda     _actions
	sta     L0106
	lda     _actions+1
	jmp     L0154
L010B:	lda     L0106
	ldx     L0106+1
	ldy     #$26
	jsr     ldaxidx
	sta     L0105
	stx     L0105+1
	lda     L0106
	ldx     L0106+1
	jsr     incax1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	tax
	beq     L0114
	lda     L0106
	sta     ptr1
	lda     L0106+1
	sta     ptr1+1
	ldy     #$22
	lda     (ptr1),y
	beq     L0114
	lda     L0106
	ldx     L0106+1
	jmp     incsp2
L0114:	lda     L0105
	sta     L0106
	lda     L0105+1
L0154:	sta     L0106+1
	lda     L0106
	ora     L0106+1
	bne     L010B
	tax
	jmp     incsp2

.endproc

