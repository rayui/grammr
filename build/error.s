;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_sprintf
	.import		_strcat
	.import		_strcpy
	.import		_malloc
	.import		_free
	.import		__afailed
	.export		_print_error
	.export		_print_errors
	.export		_free_errors
	.export		_create_error
	.import		_str_syntax_error_end_of_command_expected
	.import		_str_syntax_error_command_expected
	.import		_str_syntax_error_word_expected
	.import		_str_syntax_error_direction_expected
	.import		_str_syntax_error_item_expected
	.import		_str_syntax_error_preposition_expected
	.import		_str_syntax_error_unrecognised_token
	.import		_str_syntax_error_item_unavailable
	.import		_str_syntax_error_no_such_action
	.import		_str_terminal_system_error
	.import		_str_system_error_template
	.import		_errorList

.segment	"RODATA"

L00A3:
	.byte	$45,$4C,$45,$4D,$45,$4E,$54,$20,$49,$53,$20,$4E,$4F,$54,$20,$4D
	.byte	$45,$4D,$42,$45,$52,$20,$4F,$46,$20,$54,$48,$45,$20,$43,$4F,$4E
	.byte	$54,$41,$49,$4E,$45,$52,$2C,$20,$55,$53,$45,$20,$C4,$C5,$CC,$C5
	.byte	$D4,$C5,$A4,$C9,$C6,$A4,$CD,$C5,$CD,$C2,$C5,$D2,$20,$49,$4E,$53
	.byte	$54,$45,$41,$44,$00
L00AC:
	.byte	$53,$52,$43,$2F,$45,$52,$52,$4F,$52,$2E,$43,$00
L0046:
	.byte	$0A,$0D,$00

; ---------------------------------------------------------------
; void __near__ print_error (__near__ unsigned char *, int, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_error: near

.segment	"BSS"

L0009:
	.res	512,$00

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	cpx     #$00
	jne     L003E
	cmp     #$00
	jeq     L002E
	cmp     #$01
	beq     L000E
	cmp     #$02
	beq     L0013
	cmp     #$03
	beq     L0018
	cmp     #$04
	beq     L001D
	cmp     #$05
	beq     L0023
	cmp     #$06
	beq     L0029
	cmp     #$0A
	jeq     L0039
	cmp     #$0B
	jeq     L0033
	jmp     L003E
L000E:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_end_of_command_expected)
	ldx     #>(_str_syntax_error_end_of_command_expected)
	jsr     pushax
	ldy     #$04
	jmp     L00C8
L0013:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_command_expected)
	ldx     #>(_str_syntax_error_command_expected)
	jsr     pushax
	ldy     #$04
	jmp     L00C8
L0018:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_word_expected)
	ldx     #>(_str_syntax_error_word_expected)
	jsr     pushax
	ldy     #$04
	jmp     L00C8
L001D:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_direction_expected)
	ldx     #>(_str_syntax_error_direction_expected)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$06
	jmp     L00C8
L0023:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_item_expected)
	ldx     #>(_str_syntax_error_item_expected)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$06
	jmp     L00C8
L0029:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_preposition_expected)
	ldx     #>(_str_syntax_error_preposition_expected)
	jsr     pushax
	ldy     #$04
	jmp     L00C8
L002E:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_unrecognised_token)
	ldx     #>(_str_syntax_error_unrecognised_token)
	jsr     pushax
	ldy     #$04
	jmp     L00C8
L0033:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_item_unavailable)
	ldx     #>(_str_syntax_error_item_unavailable)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$06
	jmp     L00C8
L0039:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_syntax_error_no_such_action)
	ldx     #>(_str_syntax_error_no_such_action)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$06
	jmp     L00C8
L003E:	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(_str_system_error_template)
	ldx     #>(_str_system_error_template)
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$08
L00C8:	jsr     _sprintf
	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     pushax
	lda     #<(L0046)
	ldx     #>(L0046)
	jsr     _strcat
	ldy     #$07
	jsr     pushwysp
	lda     #<(L0009)
	ldx     #>(L0009)
	jsr     _strcat
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ print_errors (int, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_errors: near

.segment	"BSS"

L0052:
	.res	2,$00
L0053:
	.res	2,$00
L0054:
	.res	2,$00
L006A:
	.res	2,$00
L006B:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	lda     (sp),y
	bne     L004C
	dey
	lda     (sp),y
	cmp     #$02
	bne     L004C
	jsr     pushw0sp
	lda     #<(_str_terminal_system_error)
	ldx     #>(_str_terminal_system_error)
	jsr     _strcpy
L004C:	lda     _errorList
	sta     L0052
	lda     _errorList+1
	sta     L0052+1
	lda     #$00
	sta     L0054
	sta     L0054+1
	jmp     L005C
L005A:	lda     #$00
	clc
	adc     L0052
	pha
	lda     #$02
	adc     L0052+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	sta     L0053
	stx     L0053+1
	lda     L0052
	ldx     L0052+1
	jsr     pushax
	lda     L0054
	ldx     L0054+1
	ldy     #$01
	clc
	pha
	lda     #$02
	adc     (sp),y
	sta     (sp),y
	pla
	iny
	jsr     staxspidx
	lda     L0052
	sta     L0054
	lda     L0052+1
	sta     L0054+1
	lda     L0053
	sta     L0052
	lda     L0053+1
	sta     L0052+1
L005C:	lda     L0052
	ora     L0052+1
	bne     L005A
	lda     L0054
	ldx     L0054+1
	sta     _errorList
	stx     _errorList+1
	sta     L006B
	stx     L006B+1
	jmp     L0072
L0070:	lda     #$00
	clc
	adc     L006B
	pha
	lda     #$02
	adc     L006B+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	sta     L006A
	stx     L006A+1
	jsr     pushw0sp
	lda     L006B
	ldx     L006B+1
	jsr     pushw
	lda     L006B
	ldx     L006B+1
	jsr     incax2
	jsr     _print_error
	lda     L006A
	sta     L006B
	lda     L006A+1
	sta     L006B+1
L0072:	lda     L006B
	ora     L006B+1
	bne     L0070
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ free_errors (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_free_errors: near

.segment	"BSS"

L0081:
	.res	2,$00
L0082:
	.res	2,$00
L0090:
	.res	2,$00

.segment	"CODE"

	lda     _errorList
	sta     L0082
	lda     _errorList+1
	jmp     L00CB
L0087:	lda     #$00
	clc
	adc     L0082
	pha
	lda     #$02
	adc     L0082+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	sta     L0081
	stx     L0081+1
	lda     #<(_errorList)
	sta     L0090
	lda     #>(_errorList)
L00CE:	sta     L0090+1
	lda     L0090
	ldx     L0090+1
	jsr     ldaxi
	cpx     #$00
	bne     L00CC
	cmp     #$00
	beq     L0092
L00CC:	lda     L0090
	ldx     L0090+1
	jsr     ldaxi
	cpx     L0082+1
	bne     L0093
	cmp     L0082
	beq     L0092
L0093:	lda     L0090
	ldx     L0090+1
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldx     #$02
	txa
	clc
	adc     ptr1
	sta     L0090
	txa
	adc     ptr1+1
	jmp     L00CE
L0092:	lda     L0090
	ldx     L0090+1
	jsr     ldaxi
	cpx     #$00
	bne     L00CD
	cmp     #$00
	beq     L00A8
L00CD:	lda     #<(L00A3)
	ora     #>(L00A3)
	bne     L00AA
L00A8:	lda     #<(L00AC)
	ldx     #>(L00AC)
	jsr     pushax
	ldx     #$00
	lda     #$4D
	jsr     __afailed
L00AA:	lda     L0090
	sta     sreg
	lda     L0090+1
	sta     sreg+1
	lda     L0090
	ldx     L0090+1
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	clc
	adc     ptr1
	pha
	lda     #$02
	adc     ptr1+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	lda     L0082
	ldx     L0082+1
	jsr     _free
	lda     L0081
	sta     L0082
	lda     L0081+1
L00CB:	sta     L0082+1
	lda     L0082
	ora     L0082+1
	jne     L0087
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ create_error (int, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_create_error: near

.segment	"BSS"

L00B8:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	ldx     #$02
	lda     #$04
	jsr     _malloc
	sta     L00B8
	stx     L00B8+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	lda     L00B8
	ldx     L00B8+1
	jsr     incax2
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcpy
	lda     L00B8
	ldx     L00B8+1
	jsr     pushax
	lda     _errorList
	ldx     _errorList+1
	ldy     #$01
	clc
	pha
	lda     #$02
	adc     (sp),y
	sta     (sp),y
	pla
	iny
	jsr     staxspidx
	lda     L00B8
	sta     _errorList
	lda     L00B8+1
	sta     _errorList+1
	jmp     incsp4

.endproc

