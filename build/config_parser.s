;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_fclose
	.import		_fopen
	.import		_fread
	.import		_sprintf
	.import		_strcmp
	.import		_strlen
	.import		_strncmp
	.import		_strncpy
	.import		_memset
	.import		_malloc
	.import		_free
	.import		_atoi
	.import		_cprintf
	.import		_jsmn_init
	.import		_jsmn_parse
	.import		_realloc_it
	.import		_toC64Case
	.import		_create_error
	.import		_createVerb
	.import		_createItem
	.import		_createItemList
	.import		_findItemByName
	.import		_createLocation
	.import		_createLocationList
	.import		_findLocationByName
	.import		_createAction
	.export		_con_error
	.export		_con_peek
	.export		_con_peekVal
	.export		_con_accept
	.export		_con_acceptVal
	.export		_con_acceptUntilVal
	.export		_con_readtok
	.export		_con_object
	.export		_con_objects
	.export		_con_type
	.export		_con_name
	.export		_con_description
	.export		_con_item
	.export		_con_item_actions
	.export		_con_location_items
	.export		_con_location_exits
	.export		_con_location
	.export		_con_action
	.export		_con_fill_exits
	.export		_parseConfigFile
	.export		_fp
	.export		_fp_bytes
	.export		_con_tok_num
	.export		_buf
	.export		_source
	.export		_source_len
	.export		_con_counter
	.export		_con_tok
	.export		_con_int_reg
	.export		_con_int_reg_b
	.export		_con_word_reg_a
	.export		_con_word_reg_b
	.export		_con_word_reg_c
	.export		_CON_ERR
	.import		_locations
	.import		_actions
	.import		_verbs
	.export		_con_set_int_reg
	.export		_con_set_int_reg_b
	.export		_con_set_word_reg_a
	.export		_con_set_word_reg_b
	.export		_con_set_word_reg_c
	.export		_con_set_word_reg_by_index
	.export		_con_compare_word_reg
	.export		_con_id
	.export		_con_default
	.export		_con_transitivity
	.export		_con_instruction
	.export		_con_action_argument
	.export		_con_verb

.segment	"DATA"

_source_len:
	.word	$0000
_con_counter:
	.word	$0000

.segment	"RODATA"

L00E0:
	.byte	$54,$52,$41,$4E,$53,$49,$54,$49,$56,$49,$54,$59,$00
L00FA:
	.byte	$49,$4E,$53,$54,$52,$55,$43,$54,$49,$4F,$4E,$00
L00ED:
	.byte	$44,$45,$53,$43,$52,$49,$50,$54,$49,$4F,$4E,$00
L020F:
	.byte	$4C,$4F,$43,$41,$54,$49,$4F,$4E,$00
L023C	:=	L020F+0
L0148:
	.byte	$41,$43,$54,$49,$4F,$4E,$53,$00
L00D3:
	.byte	$44,$45,$46,$41,$55,$4C,$54,$00
L0216:
	.byte	$41,$43,$54,$49,$4F,$4E,$00
L01BA:
	.byte	$49,$54,$45,$4D,$53,$00
L01C0:
	.byte	$45,$58,$49,$54,$53,$00
L024B	:=	L01C0+0
L023F:
	.byte	$4E,$41,$4D,$45,$00
L021D:
	.byte	$56,$45,$52,$42,$00
L00AC:
	.byte	$54,$59,$50,$45,$00
L0022:
	.byte	$25,$2E,$2A,$53,$00
L0031	:=	L0022+0
L003E	:=	L0022+0
L0048	:=	L0022+0
L005C	:=	L0022+0
L00B9	:=	L023F+0
L0208:
	.byte	$49,$54,$45,$4D,$00
L0107:
	.byte	$41,$52,$47,$00
L0199:
	.byte	$25,$53,$00
L00C6:
	.byte	$49,$44,$00
L0276:
	.byte	$52,$00

.segment	"BSS"

_fp:
	.res	2,$00
_fp_bytes:
	.res	2,$00
_con_tok_num:
	.res	2,$00
_buf:
	.res	240,$00
_source:
	.res	2,$00
_con_tok:
	.res	2,$00
_con_int_reg:
	.res	1,$00
_con_int_reg_b:
	.res	1,$00
_con_word_reg_a:
	.res	40,$00
_con_word_reg_b:
	.res	40,$00
_con_word_reg_c:
	.res	512,$00
_CON_ERR:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ con_error (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_error: near

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	lda     #$02
	sta     _CON_ERR
	stx     _CON_ERR+1
	jsr     _con_set_word_reg_a
	jsr     pushw0sp
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     _create_error
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ con_peek (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_peek: near

.segment	"CODE"

	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	jsr     ldaxi
	ldy     #$00
	cmp     (sp),y
	bne     L0082
	txa
	iny
	cmp     (sp),y
	bne     L0082
	ldx     #$00
	tya
	jmp     incsp2
L0082:	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ con_peekVal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_peekVal: near

.segment	"CODE"

	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _strlen
	jsr     _strncmp
	cpx     #$00
	bne     L0088
	cmp     #$00
	bne     L0308
	lda     #$01
	jmp     incsp2
L0088:	ldx     #$00
L0308:	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ con_accept (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_accept: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L0093
	jsr     _con_readtok
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0093:	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ con_acceptVal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_acceptVal: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _con_peekVal
	stx     tmp1
	ora     tmp1
	beq     L009A
	jsr     _con_readtok
	ldx     #$00
	lda     #$01
	jmp     incsp2
L009A:	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_acceptUntilVal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_acceptUntilVal: near

.segment	"CODE"

	jsr     pushax
	jmp     L00A3
L00A1:	jsr     _con_readtok
L00A3:	jsr     ldax0sp
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00A1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_readtok (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_readtok: near

.segment	"CODE"

	lda     _con_counter
	ldx     _con_counter+1
	jsr     incax1
	sta     _con_counter
	stx     _con_counter+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_object (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_object: near

.segment	"CODE"

	jsr     _con_type
	stx     tmp1
	ora     tmp1
	beq     L0220
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     pushax
	lda     #<(L0208)
	ldx     #>(L0208)
	jsr     _con_compare_word_reg
	stx     tmp1
	ora     tmp1
	jne     _con_item
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     pushax
	lda     #<(L020F)
	ldx     #>(L020F)
	jsr     _con_compare_word_reg
	stx     tmp1
	ora     tmp1
	jne     _con_location
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     pushax
	lda     #<(L0216)
	ldx     #>(L0216)
	jsr     _con_compare_word_reg
	stx     tmp1
	ora     tmp1
	jne     _con_action
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     pushax
	lda     #<(L021D)
	ldx     #>(L021D)
	jsr     _con_compare_word_reg
	stx     tmp1
	ora     tmp1
	jne     _con_verb
	tax
	lda     #$14
	jmp     _con_error
L0220:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_objects: near

.segment	"CODE"

	ldx     #$00
	lda     #$01
	jsr     _con_accept
	stx     tmp1
	ora     tmp1
	jne     _con_object
	tax
	lda     #$12
	jmp     _con_error

.endproc

; ---------------------------------------------------------------
; int __near__ con_type (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_type: near

.segment	"CODE"

	lda     #<(L00AC)
	ldx     #>(L00AC)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00AE
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00AE
	jsr     _con_set_word_reg_a
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00AE:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_name (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_name: near

.segment	"CODE"

	lda     #<(L00B9)
	ldx     #>(L00B9)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00BB
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00BB
	jsr     _con_set_word_reg_b
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00BB:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_description (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_description: near

.segment	"CODE"

	lda     #<(L00ED)
	ldx     #>(L00ED)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00EF
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00EF
	jsr     _con_set_word_reg_c
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00EF:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_item (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_item: near

.segment	"BSS"

L013D:
	.res	2,$00

.segment	"CODE"

	jsr     _con_name
	stx     tmp1
	ora     tmp1
	beq     L013E
	jsr     _con_description
	stx     tmp1
	ora     tmp1
	beq     L0140
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     pushax
	lda     #<(_con_word_reg_c)
	ldx     #>(_con_word_reg_c)
	jsr     _createItem
	sta     L013D
	stx     L013D+1
	lda     #<(L0148)
	ldx     #>(L0148)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L014C
	lda     L013D
	ldx     L013D+1
	jsr     incax4
	jmp     _con_item_actions
L0140:	tax
	lda     #$18
	jmp     _con_error
L014C:	rts
L013E:	tax
	lda     #$17
	jmp     _con_error

.endproc

; ---------------------------------------------------------------
; void __near__ con_item_actions (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_item_actions: near

.segment	"BSS"

L0113:
	.res	2,$00
L0115:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	txa
	sta     L0113
	sta     L0113+1
	sta     L0115
	sta     L0115+1
	lda     #$02
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	jeq     L0117
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$07
	jsr     ldaxidx
	sta     L0115
	stx     L0115+1
	cmp     #$06
	txa
	sbc     #$00
	bvc     L011F
	eor     #$80
L011F:	asl     a
	ldx     #$00
	bcc     L030A
	lda     #$02
	jsr     _con_accept
	lda     #$00
	sta     L0113
	sta     L0113+1
L0122:	lda     L0113
	cmp     L0115
	lda     L0113+1
	sbc     L0115+1
	bvc     L0309
	eor     #$80
L0309:	bpl     L0139
	ldx     #$00
	lda     #$04
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L012A
	jsr     _con_set_int_reg
	ldx     #$00
	lda     #$04
	jsr     _con_accept
	jsr     ldax0sp
	clc
	adc     L0113
	sta     ptr1
	txa
	adc     L0113+1
	sta     ptr1+1
	lda     _con_int_reg
	ldy     #$00
	sta     (ptr1),y
	jmp     L0124
L012A:	tax
	lda     #$15
	jsr     _con_error
L0124:	lda     L0113
	ldx     L0113+1
	jsr     incax1
	sta     L0113
	stx     L0113+1
	jmp     L0122
L030A:	lda     #$16
	jsr     _con_error
	jmp     incsp2
L0117:	tax
	lda     #$14
	jsr     _con_error
L0139:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_location_items (__near__ struct Location *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_location_items: near

.segment	"BSS"

L0153:
	.res	2,$00
L0154:
	.res	2,$00
L0156:
	.res	2,$00
L0158:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	txa
	sta     L0154
	sta     L0154+1
	sta     L0156
	sta     L0156+1
	sta     L0158
	sta     L0158+1
	lda     #$02
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	jeq     L015A
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$07
	jsr     ldaxidx
	sta     L0156
	stx     L0156+1
	ldx     #$00
	lda     #$02
	jsr     _con_accept
	lda     #$00
	sta     L0154
	sta     L0154+1
L0162:	lda     L0154
	cmp     L0156
	lda     L0154+1
	sbc     L0156+1
	bvc     L030B
	eor     #$80
L030B:	bpl     L0180
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L016A
	jsr     _con_set_word_reg_b
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     _findItemByName
	sta     L0153
	stx     L0153+1
	cpx     #$00
	bne     L030D
	cmp     #$00
	beq     L030E
L030D:	lda     #$42
	clc
	ldy     #$00
	adc     (sp),y
	pha
	lda     #$02
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     L0153
	ldx     L0153+1
	jsr     _createItemList
	jmp     L0178
L030E:	lda     #$19
	jsr     _con_error
L0178:	ldx     #$00
	lda     #$03
	jsr     _con_accept
	jmp     L0164
L016A:	tax
	lda     #$17
	jmp     L030C
L0164:	lda     L0154
	ldx     L0154+1
	jsr     incax1
	sta     L0154
	stx     L0154+1
	jmp     L0162
L015A:	tax
	lda     #$13
L030C:	jsr     _con_error
L0180:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_location_exits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_location_exits: near

.segment	"BSS"

L0184:
	.res	2,$00
L0186:
	.res	2,$00

.segment	"CODE"

	ldx     #$00
	txa
	sta     L0184
	sta     L0184+1
	sta     L0186
	sta     L0186+1
	lda     #$02
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L0188
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$07
	jsr     ldaxidx
	sta     L0186
	stx     L0186+1
	ldx     #$00
	lda     #$02
	jsr     _con_accept
	lda     #$00
	sta     L0184
	sta     L0184+1
L0190:	lda     L0184
	cmp     L0186
	lda     L0184+1
	sbc     L0186+1
	bvc     L030F
	eor     #$80
L030F:	bpl     L01A1
	lda     #<(L0199)
	ldx     #>(L0199)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	stx     tmp1
	ora     tmp1
	bne     L0192
	tax
	lda     #$17
	jmp     _con_error
L0192:	lda     L0184
	ldx     L0184+1
	jsr     incax1
	sta     L0184
	stx     L0184+1
	jmp     L0190
L0188:	tax
	lda     #$13
	jmp     _con_error
L01A1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_location (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_location: near

.segment	"BSS"

L01A5:
	.res	2,$00

.segment	"CODE"

	jsr     _con_name
	stx     tmp1
	ora     tmp1
	beq     L01A6
	jsr     _con_description
	stx     tmp1
	ora     tmp1
	beq     L01A8
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     pushax
	lda     #<(_con_word_reg_c)
	ldx     #>(_con_word_reg_c)
	jsr     pushax
	jsr     push0
	jsr     _createLocation
	sta     L01A5
	stx     L01A5+1
	jsr     pushax
	lda     _locations
	ldx     _locations+1
	ldy     #$01
	clc
	pha
	lda     #$02
	adc     (sp),y
	sta     (sp),y
	pla
	ldy     #$44
	jsr     staxspidx
	lda     L01A5
	sta     _locations
	lda     L01A5+1
	sta     _locations+1
	lda     #<(L01BA)
	ldx     #>(L01BA)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L01B8
	lda     L01A5
	ldx     L01A5+1
	jsr     _con_location_items
L01B8:	lda     #<(L01C0)
	ldx     #>(L01C0)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L01C3
	jmp     _con_location_exits
L01A8:	tax
	lda     #$18
	jmp     _con_error
L01C3:	rts
L01A6:	tax
	lda     #$17
	jmp     _con_error

.endproc

; ---------------------------------------------------------------
; void __near__ con_action (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_action: near

.segment	"BSS"

L01CA:
	.res	2,$00
L01CB:
	.res	1,$00
L01CC:
	.res	1,$00

.segment	"CODE"

	lda     #$00
	sta     L01CC
	jsr     _con_id
	stx     tmp1
	ora     tmp1
	beq     L01DA
	lda     _con_int_reg
	sta     L01CB
	jsr     _con_name
	stx     tmp1
	ora     tmp1
	beq     L01DA
	jsr     _con_default
	stx     tmp1
	ora     tmp1
	beq     L0310
	lda     _con_int_reg
L0310:	sta     L01CC
	jsr     _con_instruction
	stx     tmp1
	ora     tmp1
	beq     L01DA
	lda     L01CB
	jsr     pusha
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     pushax
	lda     #<(_con_word_reg_c)
	ldx     #>(_con_word_reg_c)
	jsr     pushax
	lda     L01CC
	jsr     _createAction
	sta     L01CA
	stx     L01CA+1
	sta     ptr1
	stx     ptr1+1
	lda     _actions
	ldy     #$25
	sta     (ptr1),y
	iny
	lda     _actions+1
	sta     (ptr1),y
	lda     L01CA
	sta     _actions
	lda     L01CA+1
	sta     _actions+1
L01DA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_fill_exits (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_fill_exits: near

.segment	"BSS"

L022C:
	.res	1,$00
L022E:
	.res	1,$00
L0230:
	.res	2,$00
L0231:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	lda     #$00
	sta     L022C
	sta     L022E
	sta     _con_counter
	sta     _con_counter+1
	jmp     L0236
L0234:	lda     #<(L023C)
	ldx     #>(L023C)
	jsr     _con_acceptUntilVal
	lda     #<(L023F)
	ldx     #>(L023F)
	jsr     _con_acceptUntilVal
	jsr     _con_set_word_reg_a
	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     _findLocationByName
	sta     L0230
	stx     L0230+1
	cpx     #$00
	bne     L0317
	cmp     #$00
	jeq     L0236
L0317:	ldx     #$00
	lda     #$03
	jsr     _con_accept
	lda     #<(L024B)
	ldx     #>(L024B)
	jsr     _con_acceptUntilVal
	ldx     #$00
	lda     #$02
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	jeq     L0236
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	sta     ptr1
	txa
	adc     _con_tok+1
	sta     ptr1+1
	ldy     #$06
	lda     (ptr1),y
	sta     L022C
	ldx     #$00
	lda     #$02
	jsr     _con_accept
	lda     #$00
	sta     L022E
	tax
L0313:	lda     L022E
	cmp     L022C
	bcs     L0236
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L025D
	jsr     _con_set_word_reg_b
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     _findLocationByName
	sta     L0231
	stx     L0231+1
	lda     #$40
	clc
	adc     L0230
	pha
	lda     #$02
	adc     L0230+1
	tax
	pla
	jsr     pushax
	lda     L0231
	ldx     L0231+1
	jsr     _createLocationList
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	jmp     L0257
L025D:	tax
	lda     #$17
	jsr     _con_error
	jmp     L0236
L0257:	ldx     #$00
	lda     L022E
	clc
	adc     #$01
	sta     L022E
	jmp     L0313
L0236:	lda     _con_counter
	ldy     #$00
	cmp     (sp),y
	lda     _con_counter+1
	iny
	sbc     (sp),y
	bvc     L0311
	eor     #$80
L0311:	bpl     L0312
	lda     _CON_ERR
	ora     _CON_ERR+1
	jeq     L0234
	jmp     incsp2
L0312:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ parseConfigFile (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_parseConfigFile: near

.segment	"BSS"

L026E:
	.res	6,$00
L02D0:
	.res	2,$00
L02D1:
	.res	2,$00
L02D2:
	.res	2,$00
L02EA:
	.res	2,$00
L02EB:
	.res	2,$00
L02EC:
	.res	2,$00

.segment	"CODE"

	jsr     pushax
	lda     #$00
	sta     _CON_ERR
	sta     _CON_ERR+1
	sta     _con_counter
	sta     _con_counter+1
	jsr     pushw0sp
	lda     #<(L0276)
	ldx     #>(L0276)
	jsr     _fopen
	sta     _fp
	stx     _fp+1
	lda     _fp
	ora     _fp+1
	bne     L0278
	tax
	lda     #$02
	jmp     incsp2
L0278:	ldx     #$00
	lda     #$F0
	jsr     _malloc
	sta     _source
	stx     _source+1
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
L0318:	sta     (ptr1),y
	iny
	cpy     #$F0
	bne     L0318
L0286:	lda     #<(_buf)
	ldx     #>(_buf)
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     #$F0
	jsr     pusha0
	lda     _fp
	ldx     _fp+1
	jsr     _fread
	sta     _fp_bytes
	stx     _fp_bytes+1
	jsr     return0
	beq     L028D
	ldx     #$00
	lda     #$02
	sta     _CON_ERR
	stx     _CON_ERR+1
	lda     #$0F
	jsr     pusha0
	lda     #$00
	jsr     _create_error
	jmp     L0284
L028D:	lda     _fp_bytes
	ora     _fp_bytes+1
	jeq     L0284
	lda     _source
	ldx     _source+1
	jsr     pushax
	lda     _source_len
	clc
	adc     _fp_bytes
	pha
	lda     _source_len+1
	adc     _fp_bytes+1
	tax
	pla
	jsr     incax1
	jsr     _realloc_it
	sta     _source
	stx     _source+1
	cpx     #$00
	bne     L029C
	cmp     #$00
	bne     L029C
	lda     #$02
	sta     _CON_ERR
	stx     _CON_ERR+1
	lda     #$11
	jsr     pusha0
	lda     #<(_buf)
	ldx     #>(_buf)
	jsr     _create_error
	jmp     L0284
L029C:	lda     _source
	clc
	adc     _source_len
	pha
	lda     _source+1
	adc     _source_len+1
	tax
	pla
	jsr     pushax
	lda     #<(_buf)
	ldx     #>(_buf)
	jsr     pushax
	lda     _fp_bytes
	ldx     _fp_bytes+1
	jsr     _strncpy
	lda     _fp_bytes
	clc
	adc     _source_len
	sta     _source_len
	lda     _fp_bytes+1
	adc     _source_len+1
	sta     _source_len+1
	lda     _fp_bytes+1
	cmp     #$00
	bne     L02AC
	lda     _fp_bytes
	cmp     #$F0
L02AC:	jcs     L0286
L0284:	lda     _fp
	ldx     _fp+1
	jsr     _fclose
	lda     _source
	ldx     _source+1
	jsr     _toC64Case
	lda     _CON_ERR+1
	bne     L031E
	lda     _CON_ERR
	cmp     #$02
	jeq     L02B1
L031E:	lda     #<(L026E)
	ldx     #>(L026E)
	jsr     _jsmn_init
	lda     #<(L026E)
	ldx     #>(L026E)
	jsr     pushax
	lda     _source
	ldx     _source+1
	jsr     pushax
	lda     _source_len
	ldx     _source_len+1
	jsr     pushax
	jsr     push0
	jsr     _jsmn_parse
	sta     _con_tok_num
	stx     _con_tok_num+1
	jsr     shlax3
	jsr     _malloc
	sta     _con_tok
	stx     _con_tok+1
	lda     #<(L026E)
	ldx     #>(L026E)
	jsr     _jsmn_init
	lda     #<(L026E)
	ldx     #>(L026E)
	jsr     pushax
	lda     _source
	ldx     _source+1
	jsr     pushax
	lda     _source_len
	ldx     _source_len+1
	jsr     pushax
	lda     _con_tok
	ldx     _con_tok+1
	jsr     pushax
	lda     _con_tok_num
	ldx     _con_tok_num+1
	jsr     _jsmn_parse
	jmp     L02CA
L02C8:	jsr     _con_objects
L02CA:	lda     _con_counter
	cmp     _con_tok_num
	lda     _con_counter+1
	sbc     _con_tok_num+1
	bvc     L0319
	eor     #$80
L0319:	bpl     L031A
	lda     _CON_ERR
	ora     _CON_ERR+1
	beq     L02C8
L031A:	lda     _actions
	sta     L02D0
	lda     _actions+1
	sta     L02D0+1
	lda     #$00
	sta     L02D2
	sta     L02D2+1
	jmp     L02DA
L02D8:	lda     L02D0
	ldx     L02D0+1
	ldy     #$26
	jsr     ldaxidx
	sta     L02D1
	stx     L02D1+1
	lda     L02D0
	sta     ptr1
	lda     L02D0+1
	sta     ptr1+1
	lda     L02D2
	ldy     #$25
	sta     (ptr1),y
	iny
	lda     L02D2+1
	sta     (ptr1),y
	lda     L02D0
	sta     L02D2
	lda     L02D0+1
	sta     L02D2+1
	lda     L02D1
	sta     L02D0
	lda     L02D1+1
	sta     L02D0+1
L02DA:	lda     L02D0
	ora     L02D0+1
	bne     L02D8
	lda     L02D2
	sta     _actions
	lda     L02D2+1
	sta     _actions+1
	lda     _con_tok_num
	ldx     _con_tok_num+1
	jsr     _con_fill_exits
	lda     _locations
	sta     L02EA
	lda     _locations+1
	sta     L02EA+1
	lda     #$00
	sta     L02EC
	sta     L02EC+1
	jmp     L02F4
L02F2:	lda     #$00
	clc
	adc     L02EA
	pha
	lda     #$02
	adc     L02EA+1
	tax
	pla
	ldy     #$45
	jsr     ldaxidx
	sta     L02EB
	stx     L02EB+1
	lda     L02EA
	ldx     L02EA+1
	jsr     pushax
	lda     L02EC
	ldx     L02EC+1
	ldy     #$01
	clc
	pha
	lda     #$02
	adc     (sp),y
	sta     (sp),y
	pla
	ldy     #$44
	jsr     staxspidx
	lda     L02EA
	sta     L02EC
	lda     L02EA+1
	sta     L02EC+1
	lda     L02EB
	sta     L02EA
	lda     L02EB+1
	sta     L02EA+1
L02F4:	lda     L02EA
	ora     L02EA+1
	bne     L02F2
	lda     L02EC
	sta     _locations
	lda     L02EC+1
	sta     _locations+1
	lda     _con_tok
	ldx     _con_tok+1
	jsr     _free
L02B1:	lda     _source
	ldx     _source+1
	jsr     _free
	lda     _CON_ERR
	ldx     _CON_ERR+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_set_int_reg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_int_reg: near

.segment	"BSS"

L001F:
	.res	32,$00

.segment	"CODE"

	lda     #<(L001F)
	ldx     #>(L001F)
	jsr     pushax
	lda     #<(L0022)
	ldx     #>(L0022)
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$05
	jsr     pushwidx
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$08
	jsr     _sprintf
	lda     #<(L001F)
	ldx     #>(L001F)
	jsr     _atoi
	sta     _con_int_reg
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_set_int_reg_b (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_int_reg_b: near

.segment	"BSS"

L002E:
	.res	32,$00

.segment	"CODE"

	lda     #<(L002E)
	ldx     #>(L002E)
	jsr     pushax
	lda     #<(L0031)
	ldx     #>(L0031)
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$05
	jsr     pushwidx
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$08
	jsr     _sprintf
	lda     #<(L002E)
	ldx     #>(L002E)
	jsr     _atoi
	sta     _con_int_reg_b
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ con_set_word_reg_a (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_word_reg_a: near

.segment	"CODE"

	lda     #<(_con_word_reg_a)
	ldx     #>(_con_word_reg_a)
	jsr     pushax
	lda     #<(L003E)
	ldx     #>(L003E)
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$05
	jsr     pushwidx
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$08
	jmp     _sprintf

.endproc

; ---------------------------------------------------------------
; void __near__ con_set_word_reg_b (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_word_reg_b: near

.segment	"CODE"

	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     pushax
	lda     #<(L0048)
	ldx     #>(L0048)
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$05
	jsr     pushwidx
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$08
	jmp     _sprintf

.endproc

; ---------------------------------------------------------------
; void __near__ con_set_word_reg_c (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_word_reg_c: near

.segment	"BSS"

L0050:
	.res	2,$00

.segment	"CODE"

	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$05
	jsr     pushwidx
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	jsr     tossubax
	sta     L0050
	stx     L0050+1
	cmp     #$01
	txa
	sbc     #$02
	bvs     L0056
	eor     #$80
L0056:	bpl     L0054
	ldx     #$00
	lda     #$1F
	jmp     _con_error
L0054:	lda     #<(_con_word_reg_c)
	ldx     #>(_con_word_reg_c)
	jsr     pushax
	lda     #<(L005C)
	ldx     #>(L005C)
	jsr     pushax
	lda     L0050
	ldx     L0050+1
	jsr     pushax
	lda     _con_counter
	ldx     _con_counter+1
	jsr     aslax3
	clc
	adc     _con_tok
	pha
	txa
	adc     _con_tok+1
	tax
	pla
	ldy     #$03
	jsr     ldaxidx
	clc
	adc     _source
	pha
	txa
	adc     _source+1
	tax
	pla
	jsr     pushax
	ldy     #$08
	jmp     _sprintf

.endproc

; ---------------------------------------------------------------
; int __near__ con_set_word_reg_by_index (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_set_word_reg_by_index: near

.segment	"CODE"

	jsr     pushax
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L031F
	jsr     _con_set_word_reg_a
	jmp     L0321
L031F:	lda     (sp),y
	bne     L0320
	dey
	lda     (sp),y
	cmp     #$01
	bne     L0067
	jsr     _con_set_word_reg_b
	jmp     L0321
L0067:	iny
L0320:	lda     (sp),y
	bne     L0321
	dey
	lda     (sp),y
	cmp     #$02
	bne     L0321
	jsr     _con_set_word_reg_c
L0321:	jsr     ldax0sp
	cmp     #$03
	txa
	sbc     #$00
	bvc     L0071
	eor     #$80
L0071:	asl     a
	lda     #$00
	tax
	rol     a
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ con_compare_word_reg (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_compare_word_reg: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     _strcmp
	cpx     #$00
	bne     L007A
	cmp     #$00
	bne     L0322
	lda     #$01
	jmp     incsp4
L007A:	ldx     #$00
L0322:	txa
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ con_id (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_id: near

.segment	"CODE"

	lda     #<(L00C6)
	ldx     #>(L00C6)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00C8
	ldx     #$00
	lda     #$04
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00C8
	jsr     _con_set_int_reg
	ldx     #$00
	lda     #$04
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00C8:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_default (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_default: near

.segment	"CODE"

	lda     #<(L00D3)
	ldx     #>(L00D3)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00D5
	ldx     #$00
	lda     #$04
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00D5
	jsr     _con_set_int_reg
	ldx     #$00
	lda     #$04
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00D5:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_transitivity (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_transitivity: near

.segment	"CODE"

	lda     #<(L00E0)
	ldx     #>(L00E0)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00E2
	ldx     #$00
	lda     #$04
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00E2
	jsr     _con_set_int_reg
	ldx     #$00
	lda     #$04
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00E2:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_instruction (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_instruction: near

.segment	"CODE"

	lda     #<(L00FA)
	ldx     #>(L00FA)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L00FC
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L00FC
	jsr     _con_set_word_reg_c
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	rts
L00FC:	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ con_action_argument (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_action_argument: near

.segment	"CODE"

	jsr     pushax
	lda     #<(L0107)
	ldx     #>(L0107)
	jsr     _con_acceptVal
	stx     tmp1
	ora     tmp1
	beq     L0109
	ldx     #$00
	lda     #$03
	jsr     _con_peek
	stx     tmp1
	ora     tmp1
	beq     L0109
	jsr     ldax0sp
	jsr     _con_set_word_reg_by_index
	ldx     #$00
	lda     #$03
	jsr     _con_accept
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0109:	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ con_verb (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_con_verb: near

.segment	"BSS"

L01EB:
	.res	2,$00

.segment	"CODE"

	jsr     _con_name
	stx     tmp1
	ora     tmp1
	beq     L01EC
	jsr     _con_transitivity
	stx     tmp1
	ora     tmp1
	beq     L01EE
	lda     #<(_con_word_reg_b)
	ldx     #>(_con_word_reg_b)
	jsr     pushax
	lda     _con_int_reg
	jsr     _createVerb
	sta     L01EB
	stx     L01EB+1
	sta     ptr1
	stx     ptr1+1
	lda     _verbs
	ldy     #$19
	sta     (ptr1),y
	iny
	lda     _verbs+1
	sta     (ptr1),y
	lda     L01EB
	sta     _verbs
	lda     L01EB+1
	sta     _verbs+1
	rts
L01EE:	ldx     #$00
	lda     #$12
	jmp     _con_error
L01EC:	tax
	lda     #$12
	jmp     _con_error

.endproc

