;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_sprintf
	.import		_strchr
	.import		_strcpy
	.import		_strncpy
	.import		_memset
	.import		_atoi
	.import		_toLowerCaseCompare
	.import		_findLocationByName
	.import		_getAllLocationNames
	.import		_locationHasExit
	.import		_findItemByName
	.import		_findItemInList
	.import		_inventoryHasItem
	.import		_getAllItemNames
	.import		_cprintf
	.import		_findActionById
	.import		_cc_push_instructions
	.export		_interpret
	.export		_inst_convertSpecialVariable
	.import		_instructionList
	.import		_currentLocation
	.export		_equalityRegister
	.export		_skip
	.export		_gotoLabel
	.export		_arg1
	.export		_arg2
	.export		_currInstruction
	.export		_inst_create_instructions
	.export		_inst_invalid
	.export		_inst_eq
	.export		_inst_locationhasitem
	.export		_inst_inventoryhasitem
	.export		_inst_hasexit
	.export		_inst_not
	.export		_inst_if
	.export		_inst_setloc
	.export		_inst_additem
	.export		_inst_delitem
	.export		_inst_return
	.export		_inst_goto
	.export		_inst_label
	.export		_inst_print
	.export		_inst_printdesc
	.export		_inst_printexits
	.export		_inst_printitems
	.export		_inst_newline
	.export		_inst_action
	.export		_inst_switchfn

.segment	"DATA"

_equalityRegister:
	.word	$0000
_skip:
	.word	$0000
_currInstruction:
	.word	$0000

.segment	"RODATA"

L0055:
	.byte	$25,$53,$C9,$CE,$D6,$C1,$CC,$C9,$C4,$20,$C9,$CE,$D3,$D4,$D2,$D5
	.byte	$C3,$D4,$C9,$CF,$CE,$3A,$20,$25,$44,$20,$25,$53,$20,$25,$53,$0A
	.byte	$0D,$00
L016B:
	.byte	$25,$53,$D5,$CE,$CB,$CF,$D7,$CE,$20,$D4,$CF,$CB,$C5,$CE,$3A,$20
	.byte	$25,$44,$20,$25,$53,$20,$25,$53,$0A,$0D,$00
L004E:
	.byte	$25,$53,$CE,$CF,$20,$D3,$D5,$C3,$C8,$20,$C1,$C3,$D4,$C9,$CF,$CE
	.byte	$3A,$20,$25,$44,$0A,$0D,$00
L00D5:
	.byte	$CE,$CF,$20,$D3,$D5,$C3,$C8,$20,$CC,$CF,$C3,$C1,$D4,$C9,$CF,$CE
	.byte	$20,$25,$53,$0A,$0D,$00
L00EF	:=	L00D5+0
L00CF:
	.byte	$25,$53,$25,$53,$00
L00AD	:=	L00CF+0
L00E9	:=	L00CF+0
L00BA	:=	L00CF+0
L00F5	:=	L0055+29
L00A1	:=	L00CF+0
L001A:
	.byte	$24,$4C,$00

.segment	"BSS"

_gotoLabel:
	.res	32,$00
_arg1:
	.res	32,$00
_arg2:
	.res	32,$00

; ---------------------------------------------------------------
; int __near__ interpret (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interpret: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	sta     _skip
	sta     _skip+1
	lda     _instructionList
	sta     _currInstruction
	lda     _instructionList+1
	sta     _currInstruction+1
	jmp     L0179
L0177:	lda     _skip+1
	bne     L017C
	lda     _skip
	cmp     #$02
	bne     L017C
	lda     _currInstruction
	ldx     _currInstruction+1
	jsr     ldaxi
	cpx     #$00
	bne     L017C
	cmp     #$0C
	bne     L017C
	lda     #<(_gotoLabel)
	ldx     #>(_gotoLabel)
	jsr     pushax
	lda     _currInstruction
	ldx     _currInstruction+1
	jsr     incax2
	jsr     _toLowerCaseCompare
	tax
	beq     L017C
	lda     #$00
	sta     _skip
	sta     _skip+1
	jmp     L018D
L017C:	lda     _skip+1
	bne     L0187
	lda     _skip
	cmp     #$01
	bne     L0187
	lda     #$00
	sta     _skip
	sta     _skip+1
	jmp     L018D
L0187:	lda     _skip
	ora     _skip+1
	bne     L018D
	ldy     #$05
	jsr     pushwysp
	lda     _currInstruction
	ldx     _currInstruction+1
	jsr     _inst_switchfn
L018D:	lda     _currInstruction
	ldx     _currInstruction+1
	ldy     #$43
	jsr     ldaxidx
	sta     _currInstruction
	stx     _currInstruction+1
L0179:	lda     _currInstruction
	ora     _currInstruction+1
	jne     L0177
	jsr     ldax0sp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_convertSpecialVariable (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_convertSpecialVariable: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L001A)
	ldx     #>(L001A)
	jsr     _toLowerCaseCompare
	tax
	beq     L0017
	ldy     #$05
	jsr     pushwysp
	lda     _currentLocation
	ldx     _currentLocation+1
	jmp     L0196
L0017:	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
L0196:	jsr     _strcpy
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_create_instructions (__near__ unsigned char *, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_create_instructions: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp3
	ldy     #$06
	jsr     pushwysp
	ldx     #$00
	lda     #$2C
	jsr     _strchr
	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	jsr     _atoi
	ldy     #$02
	sta     (sp),y
	dey
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L002A
	ldy     #$0A
	jsr     pushwysp
	ldy     #$0A
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	sec
	ldy     #$09
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _strncpy
	ldy     #$08
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	jsr     _strcpy
	jmp     L0033
L002A:	ldy     #$0A
	jsr     pushwysp
	ldy     #$08
	jsr     ldaxysp
	jsr     _strcpy
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L0033:	ldy     #$02
	lda     (sp),y
	jsr     _findActionById
	ldy     #$03
	jsr     staxysp
	ldy     #$0A
	jsr     pushwysp
	ldy     #$0A
	jsr     ldaxysp
	jsr     _inst_convertSpecialVariable
	ldy     #$08
	jsr     pushwysp
	ldy     #$08
	jsr     ldaxysp
	jsr     _inst_convertSpecialVariable
	ldy     #$03
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0043
	jsr     ldaxysp
	ldy     #$24
	jsr     pushwidx
	lda     _currInstruction
	ldx     _currInstruction+1
	jsr     pushax
	ldy     #$0E
	jsr     pushwysp
	ldy     #$0C
	jsr     ldaxysp
	jsr     _cc_push_instructions
	jmp     L004B
L0043:	ldy     #$0C
	jsr     pushwysp
	lda     #<(L004E)
	ldx     #>(L004E)
	jsr     pushax
	ldy     #$10
	jsr     pushwysp
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	jsr     _sprintf
L004B:	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ inst_invalid (__near__ unsigned char *, int, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_invalid: near

.segment	"CODE"

	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	lda     #<(L0055)
	ldx     #>(L0055)
	jsr     pushax
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$0C
	jsr     _sprintf
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ inst_eq (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_eq: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	ldx     #$00
	sta     _equalityRegister
	stx     _equalityRegister+1
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_locationhasitem (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_locationhasitem: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _findLocationByName
	jsr     pushax
	jsr     decsp2
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L006A
	ldx     #$02
	lda     #$00
	clc
	dey
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     pushwidx
	ldy     #$07
	jsr     ldaxysp
	jsr     _findItemInList
	jsr     stax0sp
	cpx     #$00
	bne     L0198
	cmp     #$00
	beq     L0199
L0198:	ldx     #$00
	lda     #$01
	jmp     L0199
L006A:	tax
L0199:	sta     _equalityRegister
	stx     _equalityRegister+1
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ inst_inventoryhasitem (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_inventoryhasitem: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _inventoryHasItem
	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	cmp     #$01
	bne     L019A
	sta     _equalityRegister
	stx     _equalityRegister+1
L019A:	txa
	sta     _equalityRegister
	sta     _equalityRegister+1
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ inst_hasexit (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_hasexit: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _locationHasExit
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	sta     _equalityRegister
	sty     _equalityRegister+1
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ inst_not (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_not: near

.segment	"CODE"

	lda     _equalityRegister
	ldx     _equalityRegister+1
	jsr     bnegax
	sta     _equalityRegister
	stx     _equalityRegister+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inst_if (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_if: near

.segment	"CODE"

	lda     _equalityRegister
	ora     _equalityRegister+1
	bne     L0084
	tax
	lda     #$01
	jmp     L019C
L0084:	ldx     #$00
	txa
L019C:	sta     _skip
	stx     _skip+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inst_setloc (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_setloc: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _findLocationByName
	sta     _currentLocation
	stx     _currentLocation+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ inst_additem (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_additem: near

.segment	"CODE"

	jsr     pushax
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_delitem (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_delitem: near

.segment	"CODE"

	jsr     pushax
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_return (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_return: near

.segment	"CODE"

	ldx     #$00
	lda     #$03
	sta     _skip
	stx     _skip+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inst_goto (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_goto: near

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	lda     #$02
	sta     _skip
	stx     _skip+1
	lda     #<(_gotoLabel)
	ldx     #>(_gotoLabel)
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcpy
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ inst_label (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_label: near

.segment	"CODE"

	lda     #$00
	sta     _skip
	sta     _skip+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ inst_print (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_print: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	lda     #<(L00A1)
	ldx     #>(L00A1)
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$08
	jsr     _sprintf
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ inst_printdesc (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_printdesc: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _findLocationByName
	jsr     pushax
	jsr     decsp2
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L00A8
	ldy     #$09
	jsr     pushwysp
	lda     #<(L00AD)
	ldx     #>(L00AD)
	jsr     pushax
	ldy     #$0D
	jsr     pushwysp
	ldy     #$09
	jsr     ldaxysp
	ldy     #$40
	jsr     incaxy
	jmp     L01A0
L00A8:	ldy     #$05
	jsr     ldaxysp
	jsr     _findItemByName
	jsr     stax0sp
	cpx     #$00
	bne     L019E
	cmp     #$00
	beq     L00B5
L019E:	ldy     #$09
	jsr     pushwysp
	lda     #<(L00BA)
	ldx     #>(L00BA)
	jsr     pushax
	ldy     #$0D
	jsr     pushwysp
	ldy     #$07
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
L01A0:	jsr     pushax
	ldy     #$08
	jsr     _sprintf
L00B5:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ inst_printexits (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_printexits: near

.segment	"CODE"

	jsr     pushax
	ldy     #$80
	jsr     subysp
	ldy     #$81
	jsr     ldaxysp
	jsr     _findLocationByName
	jsr     pushax
	ldy     #$02
	lda     #$00
L00C6:	sta     (sp),y
	iny
	cpy     #$82
	bne     L00C6
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L00C7
	lda     #$00
	clc
	adc     _currentLocation
	pha
	lda     #$02
	adc     _currentLocation+1
	tax
	pla
	ldy     #$41
	jsr     pushwidx
	lda     #$04
	jsr     leaa0sp
	jsr     _getAllLocationNames
	ldy     #$87
	jsr     pushwysp
	lda     #<(L00CF)
	ldx     #>(L00CF)
	jsr     pushax
	ldy     #$8B
	jsr     pushwysp
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$08
	jsr     _sprintf
	jmp     L00D3
L00C7:	lda     #<(L00D5)
	ldx     #>(L00D5)
	jsr     pushax
	ldy     #$87
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
L00D3:	ldy     #$86
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ inst_printitems (__near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_printitems: near

.segment	"CODE"

	jsr     pushax
	ldy     #$80
	jsr     subysp
	ldy     #$81
	jsr     ldaxysp
	jsr     _findLocationByName
	jsr     pushax
	ldy     #$02
	lda     #$00
L00E0:	sta     (sp),y
	iny
	cpy     #$82
	bne     L00E0
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L00E1
	lda     #$00
	clc
	adc     _currentLocation
	pha
	lda     #$02
	adc     _currentLocation+1
	tax
	pla
	ldy     #$43
	jsr     pushwidx
	lda     #$04
	jsr     leaa0sp
	jsr     _getAllItemNames
	ldy     #$87
	jsr     pushwysp
	lda     #<(L00E9)
	ldx     #>(L00E9)
	jsr     pushax
	ldy     #$8B
	jsr     pushwysp
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$08
	jsr     _sprintf
	jmp     L00ED
L00E1:	lda     #<(L00EF)
	ldx     #>(L00EF)
	jsr     pushax
	ldy     #$87
	jsr     pushwysp
	ldy     #$04
	jsr     _cprintf
L00ED:	ldy     #$86
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ inst_newline (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_newline: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L00F5)
	ldx     #>(L00F5)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$06
	jsr     _sprintf
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ inst_action (int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_action: near

.segment	"CODE"

	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _inst_create_instructions
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ inst_switchfn (__near__ unsigned char *, __near__ struct InstructionList *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_inst_switchfn: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     pushw
	ldy     #$01
	lda     (sp),y
	bne     L01A1
	dey
	lda     (sp),y
	cmp     #$12
	beq     L00FF
L01A1:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     incax2
	jsr     _inst_convertSpecialVariable
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$22
	jsr     incaxy
	jsr     _inst_convertSpecialVariable
	jmp     L0108
L00FF:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     incax2
	jsr     _strcpy
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$22
	jsr     incaxy
	jsr     _strcpy
L0108:	jsr     ldax0sp
	cpx     #$00
	jne     L0168
	cmp     #$00
	jeq     L0113
	cmp     #$01
	jeq     L011A
	cmp     #$02
	jeq     L011F
	cmp     #$03
	jeq     L0124
	cmp     #$04
	jeq     L0128
	cmp     #$05
	jeq     L012D
	cmp     #$06
	jeq     L0130
	cmp     #$07
	jeq     L0133
	cmp     #$08
	jeq     L0137
	cmp     #$09
	jeq     L013C
	cmp     #$0A
	jeq     L0141
	cmp     #$0B
	jeq     L0144
	cmp     #$0C
	jeq     L0148
	cmp     #$0D
	jeq     L014B
	cmp     #$0E
	jeq     L0150
	cmp     #$0F
	jeq     L0155
	cmp     #$10
	jeq     L015A
	cmp     #$11
	jeq     L015F
	cmp     #$12
	jeq     L0163
	jmp     L0168
L0113:	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_invalid
	jmp     incsp6
L011A:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_eq
	jmp     incsp6
L011F:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_locationhasitem
	jmp     incsp6
L0124:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_inventoryhasitem
	jmp     incsp6
L0128:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_hasexit
	jmp     incsp6
L012D:	jsr     _inst_not
	jmp     incsp6
L0130:	jsr     _inst_if
	jmp     incsp6
L0133:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_setloc
	jmp     incsp6
L0137:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_additem
	jmp     incsp6
L013C:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_delitem
	jmp     incsp6
L0141:	jsr     _inst_return
	jmp     incsp6
L0144:	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_goto
	jmp     incsp6
L0148:	jsr     _inst_label
	jmp     incsp6
L014B:	ldy     #$07
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_print
	jmp     incsp6
L0150:	ldy     #$07
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_printdesc
	jmp     incsp6
L0155:	ldy     #$07
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_printexits
	jmp     incsp6
L015A:	ldy     #$07
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     _inst_printitems
	jmp     incsp6
L015F:	ldy     #$05
	jsr     ldaxysp
	jsr     _inst_newline
	jmp     incsp6
L0163:	ldy     #$07
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     _inst_action
	jmp     incsp6
L0168:	ldy     #$07
	jsr     pushwysp
	lda     #<(L016B)
	ldx     #>(L016B)
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	lda     #<(_arg1)
	ldx     #>(_arg1)
	jsr     pushax
	lda     #<(_arg2)
	ldx     #>(_arg2)
	jsr     pushax
	ldy     #$0C
	jsr     _sprintf
	jmp     incsp6

.endproc

