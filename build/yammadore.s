;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_sprintf
	.import		_malloc
	.import		_free
	.import		_clrscr
	.import		_cprintf
	.import		_cursor
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_memset
	.import		_acceptInput
	.import		_print_errors
	.import		_free_errors
	.import		_lex
	.import		_free_lexer
	.import		_free_parser
	.import		_parse
	.import		_interpret
	.import		_parseConfigFile
	.export		_tokenList
	.export		_instructionList
	.export		_errorList
	.export		_actions
	.export		_verbs
	.export		_items
	.export		_currentLocation
	.export		_locations
	.export		_inventory
	.export		_ifError
	.export		_main

.segment	"DATA"

_tokenList:
	.word	$0000
_instructionList:
	.word	$0000
_errorList:
	.word	$0000
_actions:
	.word	$0000
_verbs:
	.word	$0000
_items:
	.word	$0000
_locations:
	.word	$0000
_inventory:
	.word	$0000

.segment	"RODATA"

L001E:
	.byte	$D9,$4F,$55,$20,$57,$52,$4F,$54,$45,$3A,$20,$25,$53,$0A,$0D,$0A
	.byte	$0D,$00
L0039:
	.byte	$CC,$CF,$C1,$C4,$C9,$CE,$C7,$20,$C7,$C1,$CD,$C5,$2E,$2E,$2E,$00
L003D:
	.byte	$44,$41,$54,$41,$2E,$50,$45,$54,$00
L007C:
	.byte	$25,$53,$0A,$0D,$00
L0070	:=	L0039+14
L0064	:=	L0039+14
L0057	:=	L0039+14

.segment	"BSS"

_currentLocation:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ ifError (int, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ifError: near

.segment	"CODE"

	jsr     pushax
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0019
	jsr     pushw0sp
	lda     #<(L001E)
	ldx     #>(L001E)
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$06
	jsr     _sprintf
	ldy     #$07
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _print_errors
L0019:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"BSS"

L0025:
	.res	2,$00
L0027:
	.res	2,$00
L0029:
	.res	2,$00
L002C:
	.res	2,$00

.segment	"CODE"

	lda     #$00
	sta     L0025
	sta     L0025+1
	sta     L0027
	sta     L0027+1
	ldx     #$02
	jsr     _malloc
	sta     L0029
	stx     L0029+1
	ldx     #$04
	lda     #$00
	jsr     _malloc
	sta     L002C
	stx     L002C+1
	jsr     _clrscr
	lda     #$00
	jsr     _bordercolor
	lda     #$00
	jsr     _bgcolor
	lda     #$05
	jsr     _textcolor
	lda     #$01
	jsr     _cursor
	lda     #<(L0039)
	ldx     #>(L0039)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     #<(L003D)
	ldx     #>(L003D)
	jsr     _parseConfigFile
	sta     L0027
	stx     L0027+1
	cpx     #$00
	jne     L0045
	cmp     #$00
	jne     L0045
	lda     _locations
	sta     _currentLocation
	lda     _locations+1
	sta     _currentLocation+1
	jmp     L0046
L0044:	lda     #$00
	sta     L0027
	sta     L0027+1
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	ldx     #$02
	lda     #$00
	jsr     __bzero
	lda     L002C
	ldx     L002C+1
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     __bzero
	lda     #<(L0029)
	ldx     #>(L0029)
	jsr     _acceptInput
	jsr     _clrscr
	lda     #<(L0057)
	ldx     #>(L0057)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     L0029
	ldx     L0029+1
	jsr     _lex
	sta     L0027
	stx     L0027+1
	jsr     pushax
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	lda     L002C
	ldx     L002C+1
	jsr     _ifError
	lda     L0027
	ora     L0027+1
	bne     L0060
	lda     #<(L0064)
	ldx     #>(L0064)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	jsr     _parse
	sta     L0027
	stx     L0027+1
	jsr     pushax
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	lda     L002C
	ldx     L002C+1
	jsr     _ifError
	lda     L0027
	ora     L0027+1
	bne     L006C
	lda     #<(L0070)
	ldx     #>(L0070)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
	lda     L002C
	ldx     L002C+1
	jsr     _interpret
	sta     L0027
	stx     L0027+1
	jsr     pushax
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	lda     L002C
	ldx     L002C+1
	jsr     _ifError
L006C:	jsr     _free_parser
L0060:	jsr     _free_lexer
	lda     #<(L007C)
	ldx     #>(L007C)
	jsr     pushax
	lda     L002C
	ldx     L002C+1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jsr     _free_errors
L0046:	lda     L0027+1
	jne     L0044
	lda     L0027
	cmp     #$02
	jne     L0044
L0045:	lda     L0027
	ldx     L0027+1
	jsr     pushax
	lda     L0029
	ldx     L0029+1
	jsr     pushax
	lda     L002C
	ldx     L002C+1
	jsr     _ifError
	jsr     _free_errors
	lda     L0029
	ldx     L0029+1
	jsr     _free
	lda     L002C
	ldx     L002C+1
	jsr     _free
	ldx     #$00
	txa
	rts

.endproc

