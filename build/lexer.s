;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_strcpy
	.import		_strncpy
	.import		_strtok
	.import		_malloc
	.import		_free
	.import		__afailed
	.import		_toLowerCaseCompare
	.import		_isStringNumeric
	.import		_isStringAlpha
	.import		_create_error
	.export		_isNumber
	.export		_isConjunction
	.export		_isVerb
	.export		_isVerbPhrasal
	.export		_tokenTypeFromValue
	.export		_readtok
	.export		_createVerb
	.export		_getVerbTransitivityByName
	.export		_lex
	.export		_free_lexer
	.export		_SPLIT_CHAR
	.export		_counter
	.import		_verbs
	.import		_tokenList
	.export		_ERR
	.export		_lastToken
	.export		_isPreposition
	.export		_isPronoun
	.export		_isComplex
	.export		_getVerbByName

.segment	"RODATA"

_SPLIT_CHAR:
	.byte	$20,$00
L0146:
	.byte	$45,$4C,$45,$4D,$45,$4E,$54,$20,$49,$53,$20,$4E,$4F,$54,$20,$4D
	.byte	$45,$4D,$42,$45,$52,$20,$4F,$46,$20,$54,$48,$45,$20,$43,$4F,$4E
	.byte	$54,$41,$49,$4E,$45,$52,$2C,$20,$55,$53,$45,$20,$C4,$C5,$CC,$C5
	.byte	$D4,$C5,$A4,$C9,$C6,$A4,$CD,$C5,$CD,$C2,$C5,$D2,$20,$49,$4E,$53
	.byte	$54,$45,$41,$44,$00
L014F:
	.byte	$53,$52,$43,$2F,$4C,$45,$58,$45,$52,$2E,$43,$00
L0012:
	.byte	$57,$49,$54,$48,$00
L0047:
	.byte	$44,$4F,$57,$4E,$00
L005B:
	.byte	$54,$48,$45,$4E,$00
L002A:
	.byte	$46,$4F,$52,$00
L0027:
	.byte	$4F,$46,$46,$00
L0021:
	.byte	$4F,$55,$54,$00
L0015:
	.byte	$41,$4E,$44,$00
L0053:
	.byte	$54,$48,$45,$00
L003E:
	.byte	$41,$54,$00
L0024:
	.byte	$4F,$4E,$00
L004A:
	.byte	$54,$4F,$00
L0041:
	.byte	$49,$4E,$00
L002D	:=	L004A+0
L001E	:=	L0041+0
L0044:
	.byte	$55,$50,$00

.segment	"BSS"

_counter:
	.res	2,$00
_ERR:
	.res	1,$00
_lastToken:
	.res	2,$00

; ---------------------------------------------------------------
; unsigned char __near__ isNumber (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isNumber: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _isStringNumeric
	ldx     #$00
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isConjunction (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isConjunction: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L0012)
	ldx     #>(L0012)
	jsr     _toLowerCaseCompare
	tax
	bne     L0010
	jsr     pushw0sp
	lda     #<(L0015)
	ldx     #>(L0015)
	jsr     _toLowerCaseCompare
	tax
	jeq     incsp2
L0010:	ldx     #$00
	lda     #$01
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isVerb (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isVerb: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     decsp4
	lda     _verbs
	ldx     _verbs+1
	jmp     L015D
L015C:	jsr     ldaxysp
	ldy     #$1A
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$08
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	tax
	beq     L006E
	lda     #$01
	ldy     #$04
	sta     (sp),y
L006E:	ldy     #$03
	jsr     ldaxysp
L015D:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L015C
	jsr     incsp4
	tax
	lda     (sp,x)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isVerbPhrasal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isVerbPhrasal: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L003E)
	ldx     #>(L003E)
	jsr     _toLowerCaseCompare
	tax
	bne     L003C
	jsr     pushw0sp
	lda     #<(L0041)
	ldx     #>(L0041)
	jsr     _toLowerCaseCompare
	tax
	bne     L003C
	jsr     pushw0sp
	lda     #<(L0044)
	ldx     #>(L0044)
	jsr     _toLowerCaseCompare
	tax
	bne     L003C
	jsr     pushw0sp
	lda     #<(L0047)
	ldx     #>(L0047)
	jsr     _toLowerCaseCompare
	tax
	bne     L003C
	jsr     pushw0sp
	lda     #<(L004A)
	ldx     #>(L004A)
	jsr     _toLowerCaseCompare
	tax
	jeq     incsp2
L003C:	ldx     #$00
	lda     #$01
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ tokenTypeFromValue (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tokenTypeFromValue: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _isConjunction
	tax
	beq     L0098
	ldx     #$00
	lda     #$03
	jmp     incsp2
L0098:	lda     _lastToken
	ldx     _lastToken+1
	jsr     ldaxi
	cpx     #$00
	bne     L009D
	cmp     #$00
	bne     L009D
	jsr     ldax0sp
	jsr     _isVerbPhrasal
	tax
	beq     L009D
	ldx     #$00
	lda     #$01
	jmp     incsp2
L009D:	jsr     ldax0sp
	jsr     _isPronoun
	tax
	beq     L00A5
	ldx     #$00
	lda     #$05
	jmp     incsp2
L00A5:	jsr     ldax0sp
	jsr     _isPreposition
	tax
	beq     L00AA
	ldx     #$00
	lda     #$06
	jmp     incsp2
L00AA:	jsr     ldax0sp
	jsr     _isComplex
	tax
	beq     L00AF
	ldx     #$00
	lda     #$04
	jmp     incsp2
L00AF:	jsr     ldax0sp
	jsr     _isVerb
	tax
	beq     L00B4
	ldx     #$00
	txa
	jmp     incsp2
L00B4:	jsr     ldax0sp
	jsr     _isNumber
	tax
	beq     L00B9
	lda     #$01
	sta     _ERR
	jsr     push0
	ldy     #$03
	jsr     ldaxysp
	jsr     _create_error
	ldx     #$00
	lda     #$08
	jmp     incsp2
L00B9:	jsr     ldax0sp
	jsr     _isStringAlpha
	stx     tmp1
	ora     tmp1
	beq     L00C3
	ldx     #$00
	lda     #$07
	jmp     incsp2
L00C3:	tax
	lda     #$09
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ readtok (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readtok: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldx     #$00
	lda     #$1C
	jsr     _malloc
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L00CD
	jsr     ldaxysp
	jmp     L0164
L00CD:	tax
L0164:	jsr     pushax
	lda     #<(_SPLIT_CHAR)
	ldx     #>(_SPLIT_CHAR)
	jsr     _strtok
	ldy     #$02
	jsr     staxysp
	jsr     pushw0sp
	ldy     #$05
	jsr     ldaxysp
	jsr     _tokenTypeFromValue
	ldy     #$00
	jsr     staxspidx
	jsr     ldax0sp
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     _strcpy
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     _tokenList
	ldy     #$1A
	sta     (ptr1),y
	iny
	lda     _tokenList+1
	sta     (ptr1),y
	jsr     ldax0sp
	sta     _tokenList
	stx     _tokenList+1
	jsr     ldax0sp
	sta     _lastToken
	stx     _lastToken+1
	lda     _counter
	ldx     _counter+1
	jsr     incax1
	sta     _counter
	stx     _counter+1
	jsr     ldax0sp
	jsr     ldaxi
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; __near__ struct Verbs * __near__ createVerb (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_createVerb: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     #$1B
	jsr     _malloc
	jsr     pushax
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0165
	jsr     pushw0sp
	ldy     #$06
	jsr     ldaxysp
	jsr     _strcpy
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$18
	sta     (ptr1),y
L0165:	jsr     ldax0sp
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ getVerbTransitivityByName (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getVerbTransitivityByName: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _getVerbByName
	jsr     pushax
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L0092
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$18
	ldx     #$00
	lda     (ptr1),y
	jmp     incsp4
L0092:	tax
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ lex (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lex: near

.segment	"BSS"

L00F9:
	.res	512,$00

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	lda     #$00
	sta     _ERR
	sta     _counter
	sta     _counter+1
	lda     #<(L00F9)
	ldx     #>(L00F9)
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldx     #$01
	lda     #$FE
	jsr     _strncpy
	lda     #$00
	sta     L00F9+511
	lda     #<(L00F9)
	ldx     #>(L00F9)
	jmp     L016A
L0108:	ldx     #$00
	txa
L016A:	jsr     _readtok
	jsr     stax0sp
	ldy     #$01
	lda     (sp),y
	bne     L0108
	dey
	lda     (sp),y
	cmp     #$09
	bne     L0108
	jsr     decsp6
	lda     _tokenList
	ldx     _tokenList+1
	ldy     #$04
	jsr     staxysp
	ldx     #$00
	txa
	tay
	jmp     L0167
L0168:	jsr     ldaxysp
	ldy     #$1B
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$1A
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$05
	jsr     ldaxysp
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	ldy     #$04
L0167:	jsr     staxysp
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0168
	jsr     ldax0sp
	sta     _tokenList
	stx     _tokenList+1
	jsr     incsp6
	lda     _ERR
	ldx     #$00
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ free_lexer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_free_lexer: near

.segment	"CODE"

	jsr     decsp4
	lda     _tokenList
	ldx     _tokenList+1
	jmp     L0172
L016F:	jsr     ldax0sp
	ldy     #$1B
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     decsp2
	lda     #<(_tokenList)
	ldx     #>(_tokenList)
L0173:	jsr     stax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L0170
	cmp     #$00
	beq     L0135
L0170:	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$02
	cmp     (sp),y
	bne     L0136
	txa
	iny
	cmp     (sp),y
	beq     L0135
L0136:	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$1A
	jsr     incaxy
	jmp     L0173
L0135:	jsr     ldax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L0171
	cmp     #$00
	beq     L014B
L0171:	lda     #<(L0146)
	ora     #>(L0146)
	bne     L014D
L014B:	lda     #<(L014F)
	ldx     #>(L014F)
	jsr     pushax
	ldx     #$00
	lda     #$B6
	jsr     __afailed
L014D:	jsr     ldax0sp
	sta     sreg
	stx     sreg+1
	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$1B
	jsr     ldaxidx
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	jsr     incsp2
	jsr     ldax0sp
	jsr     _free
	ldy     #$03
	jsr     ldaxysp
L0172:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L016F
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isPreposition (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isPreposition: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L001E)
	ldx     #>(L001E)
	jsr     _toLowerCaseCompare
	tax
	bne     L001C
	jsr     pushw0sp
	lda     #<(L0021)
	ldx     #>(L0021)
	jsr     _toLowerCaseCompare
	tax
	bne     L001C
	jsr     pushw0sp
	lda     #<(L0024)
	ldx     #>(L0024)
	jsr     _toLowerCaseCompare
	tax
	bne     L001C
	jsr     pushw0sp
	lda     #<(L0027)
	ldx     #>(L0027)
	jsr     _toLowerCaseCompare
	tax
	bne     L001C
	jsr     pushw0sp
	lda     #<(L002A)
	ldx     #>(L002A)
	jsr     _toLowerCaseCompare
	tax
	bne     L001C
	jsr     pushw0sp
	lda     #<(L002D)
	ldx     #>(L002D)
	jsr     _toLowerCaseCompare
	tax
	jeq     incsp2
L001C:	lda     _lastToken
	ldx     _lastToken+1
	jsr     ldaxi
	cpx     #$00
	bne     L0176
	cmp     #$07
	bne     L0177
	lda     _lastToken
	ldx     _lastToken+1
	jsr     incax2
	jsr     _isVerbPhrasal
	tax
	beq     L0177
	lda     _lastToken
	sta     ptr1
	lda     _lastToken+1
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
L0176:	ldx     #$00
L0177:	lda     #$01
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isPronoun (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isPronoun: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L0053)
	ldx     #>(L0053)
	jsr     _toLowerCaseCompare
	tax
	beq     L004F
	ldx     #$00
	lda     #$01
	jmp     incsp2
L004F:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isComplex (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isComplex: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	lda     #<(L005B)
	ldx     #>(L005B)
	jsr     _toLowerCaseCompare
	tax
	beq     L0057
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0057:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; __near__ struct Verbs * __near__ getVerbByName (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getVerbByName: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	lda     _verbs
	ldx     _verbs+1
	jmp     L017C
L017B:	jsr     ldaxysp
	ldy     #$1A
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _toLowerCaseCompare
	tax
	beq     L0086
	jsr     ldax0sp
	jsr     incsp4
	jmp     incsp2
L0086:	ldy     #$03
	jsr     ldaxysp
L017C:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L017B
	jsr     incsp4
	tax
	jmp     incsp2

.endproc

