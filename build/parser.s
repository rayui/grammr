;
; File generated by cc65 v 2.15 - Git c768de1
;
	.fopt		compiler,"cc65 v 2.15 - Git c768de1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_strcat
	.import		_strchr
	.import		_strcmp
	.import		_strcpy
	.import		_strlen
	.import		_strncpy
	.import		_strtok
	.import		_memset
	.import		_malloc
	.import		_free
	.import		__afailed
	.import		_cprintf
	.import		_replace_str
	.import		_create_error
	.import		_findItemByName
	.import		_findLocationByName
	.import		_inst_get_instruction
	.import		_createInstructionList
	.import		_findActionByName
	.import		_findActionByNameAndItem
	.import		_findDefaultActionByName
	.import		_getVerbTransitivityByName
	.export		_cc_empty_name_list
	.export		_cc_set_word_reg
	.export		_cc_push_instructions
	.export		_cc_create_instruction
	.export		_cc_push_to_cc_word_reg
	.export		_cc_commands
	.export		_cc_command
	.export		_cc_eol
	.export		_cc_quit
	.export		_cc_item_name
	.export		_cc_item
	.export		_cc_word
	.export		_cc_error
	.export		_cc_peek
	.export		_cc_accept
	.export		_cc_acceptVal
	.export		_cc_readtok
	.export		_free_parser
	.export		_parse
	.export		_CON_SPLIT_INSTR_CHAR
	.export		_CON_SPLIT_ARG_CHAR
	.export		_ERR
	.export		_cc_counter
	.export		_cc_word_reg
	.export		_cc_stack_names
	.export		_cc_action_reg
	.import		_instructionList
	.import		_tokenList
	.export		_lastInstruction
	.export		_cc_set_action_reg
	.export		_cc_concat_action_reg
	.export		_cc_concat_word_reg
	.export		_cc_convertSpecialVariable
	.export		_cc_peekVal
	.export		_cc_location_name
	.export		_cc_preposition
	.export		_cc_conjunction
	.export		_cc_verb_intrans
	.export		_cc_verb_monotrans
	.export		_cc_verb_ditrans
	.export		_cc_action

.segment	"DATA"

_ERR:
	.word	$0000
_cc_counter:
	.word	$0000

.segment	"RODATA"

_CON_SPLIT_INSTR_CHAR:
	.byte	$3B,$00
_CON_SPLIT_ARG_CHAR:
	.byte	$2C
L003B:
	.byte	$45,$4C,$45,$4D,$45,$4E,$54,$20,$49,$53,$20,$4E,$4F,$54,$20,$4D
	.byte	$45,$4D,$42,$45,$52,$20,$4F,$46,$20,$54,$48,$45,$20,$43,$4F,$4E
	.byte	$54,$41,$49,$4E,$45,$52,$2C,$20,$55,$53,$45,$20,$C4,$C5,$CC,$C5
	.byte	$D4,$C5,$A4,$C9,$C6,$A4,$CD,$C5,$CD,$C2,$C5,$D2,$20,$49,$4E,$53
	.byte	$54,$45,$41,$44,$00
L0044:
	.byte	$53,$52,$43,$2F,$50,$41,$52,$53,$45,$52,$2E,$43,$00
L0157:
	.byte	$D0,$D2,$CF,$CE,$CF,$D5,$CE,$21,$0A,$0D,$00
L0092:
	.byte	$24,$CF,$00
L0087:
	.byte	$24,$D3,$00
L0169:
	.byte	$2C,$00
L0176	:=	L0169+0
L0197:
	.byte	$20,$00
L006B	:=	L0197+0

.segment	"BSS"

_cc_word_reg:
	.res	24,$00
_cc_stack_names:
	.res	2,$00
_cc_action_reg:
	.res	24,$00
_lastInstruction:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ cc_empty_name_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_empty_name_list: near

.segment	"CODE"

	jsr     decsp4
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	jmp     L02C2
L02BF:	jsr     ldax0sp
	ldy     #$21
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     decsp2
	lda     #<(_cc_stack_names)
	ldx     #>(_cc_stack_names)
L02C3:	jsr     stax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L02C0
	cmp     #$00
	beq     L002A
L02C0:	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$02
	cmp     (sp),y
	bne     L002B
	txa
	iny
	cmp     (sp),y
	beq     L002A
L002B:	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$20
	jsr     incaxy
	jmp     L02C3
L002A:	jsr     ldax0sp
	jsr     ldaxi
	cpx     #$00
	bne     L02C1
	cmp     #$00
	beq     L0040
L02C1:	lda     #<(L003B)
	ora     #>(L003B)
	bne     L0042
L0040:	lda     #<(L0044)
	ldx     #>(L0044)
	jsr     pushax
	ldx     #$00
	lda     #$28
	jsr     __afailed
L0042:	jsr     ldax0sp
	sta     sreg
	stx     sreg+1
	jsr     ldax0sp
	jsr     ldaxi
	ldy     #$21
	jsr     ldaxidx
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	jsr     incsp2
	jsr     ldax0sp
	jsr     _free
	ldy     #$03
	jsr     ldaxysp
L02C2:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L02BF
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ cc_set_word_reg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_set_word_reg: near

.segment	"CODE"

	ldy     #$17
	lda     #$00
L0064:	sta     _cc_word_reg,y
	dey
	bpl     L0064
	lda     #<(_cc_word_reg)
	ldx     #>(_cc_word_reg)
	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _strcpy

.endproc

; ---------------------------------------------------------------
; __near__ struct InstructionList * __near__ cc_push_instructions (__near__ unsigned char *, __near__ struct InstructionList *, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_push_instructions: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$09
	jsr     ldaxysp
	jsr     _strlen
	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	jsr     incax1
	jsr     _malloc
	jsr     pushax
	jsr     push0
	ldy     #$05
	jsr     pushwysp
	ldy     #$12
	jsr     pushwysp
	ldy     #$08
	lda     (sp),y
	ldx     #$00
	jsr     _strncpy
	ldy     #$04
	lda     (sp),y
	clc
	ldy     #$02
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	ldy     #$05
	jsr     pushwysp
	lda     #<(_CON_SPLIT_INSTR_CHAR)
	ldx     #>(_CON_SPLIT_INSTR_CHAR)
	jsr     _strtok
	ldy     #$05
	jmp     L02C4
L02C5:	jsr     ldaxysp
	jsr     pushax
	ldy     #$0E
	jsr     pushwysp
	ldy     #$0C
	jsr     ldaxysp
	jsr     _cc_create_instruction
	jsr     stax0sp
	ldy     #$0B
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0105
	jsr     ldax0sp
	ldy     #$0B
	jsr     staxysp
	jsr     pushax
	ldy     #$10
	jsr     pushwysp
	ldx     #$00
	txa
	ldy     #$44
	jsr     staxspidx
	ldy     #$42
	jsr     staxspidx
	jmp     L011F
L0105:	jsr     ldax0sp
	sta     sreg
	stx     sreg+1
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	ldy     #$42
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$44
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$42
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	jsr     ldax0sp
	ldy     #$43
	jsr     ldaxidx
	cpx     #$00
	bne     L02C6
	cmp     #$00
	beq     L011F
L02C6:	jsr     ldax0sp
	ldy     #$43
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$44
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
L011F:	lda     _instructionList
	ora     _instructionList+1
	bne     L0127
	ldy     #$0C
	jsr     ldaxysp
	sta     _instructionList
	stx     _instructionList+1
L0127:	jsr     push0
	lda     #<(_CON_SPLIT_INSTR_CHAR)
	ldx     #>(_CON_SPLIT_INSTR_CHAR)
	jsr     _strtok
	ldy     #$05
	jsr     staxysp
	jsr     ldax0sp
	ldy     #$0B
L02C4:	jsr     staxysp
	ldy     #$05
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L02C5
	ldy     #$03
	jsr     ldaxysp
	jsr     _free
	lda     _lastInstruction
	ldx     _lastInstruction+1
	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; __near__ struct InstructionList * __near__ cc_create_instruction (__near__ unsigned char *, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_create_instruction: near

.segment	"CODE"

	jsr     pushax
	ldy     #$64
	jsr     subysp
	ldy     #$6B
	jsr     pushwysp
	lda     _CON_SPLIT_ARG_CHAR
	ldx     #$00
	jsr     _strchr
	jsr     pushax
	jsr     decsp2
	ldy     #$24
	lda     #$00
L00BC:	sta     (sp),y
	iny
	cpy     #$44
	bne     L00BC
	ldy     #$04
	lda     #$00
L00C1:	sta     (sp),y
	iny
	cpy     #$24
	bne     L00C1
	ldy     #$6D
	jsr     ldaxysp
	jsr     _inst_get_instruction
	ldy     #$64
	jsr     staxysp
	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L00C5
	iny
	jsr     ldaxysp
	jsr     incax1
	jsr     pushax
	lda     _CON_SPLIT_ARG_CHAR
	ldx     #$00
	jsr     _strchr
	jsr     stax0sp
	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L00CB
	lda     #$24
	jsr     leaa0sp
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     decax1
	jsr     _strncpy
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     incax1
	jmp     L02C7
L00CB:	lda     #$24
	jsr     leaa0sp
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     incax1
	jmp     L02C7
L00C5:	lda     #$44
	jsr     leaa0sp
	jsr     pushax
	ldy     #$6F
	jsr     ldaxysp
L02C7:	jsr     _strcpy
	lda     #$24
	jsr     leaa0sp
	jsr     pushax
	ldy     #$6F
	jsr     pushwysp
	ldy     #$6D
	jsr     ldaxysp
	jsr     _cc_convertSpecialVariable
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	ldy     #$6F
	jsr     pushwysp
	ldy     #$6D
	jsr     ldaxysp
	jsr     _cc_convertSpecialVariable
	ldy     #$67
	jsr     pushwysp
	lda     #$26
	jsr     leaa0sp
	jsr     pushax
	lda     #$08
	jsr     leaa0sp
	jsr     _createInstructionList
	ldy     #$66
	jsr     staxysp
	ldy     #$6E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ cc_push_to_cc_word_reg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_push_to_cc_word_reg: near

.segment	"CODE"

	ldx     #$00
	lda     #$22
	jsr     _malloc
	jsr     pushax
	jsr     pushw0sp
	lda     #<(_cc_word_reg)
	ldx     #>(_cc_word_reg)
	jsr     _strcpy
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     _cc_stack_names
	ldy     #$20
	sta     (ptr1),y
	iny
	lda     _cc_stack_names+1
	sta     (ptr1),y
	jsr     ldax0sp
	sta     _cc_stack_names
	stx     _cc_stack_names+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cc_commands (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_commands: near

.segment	"CODE"

	jsr     _cc_command
	ldx     #$00
	lda     #$09
	jsr     _cc_accept
	stx     tmp1
	ora     tmp1
	jne     _cc_eol
	tax
	lda     #$04
	jsr     _cc_accept
	stx     tmp1
	ora     tmp1
	jne     _cc_commands
	lda     #$01
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_command (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_command: near

.segment	"CODE"

	jsr     _cc_empty_name_list
	ldx     #$00
	txa
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L020E
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jsr     _getVerbTransitivityByName
	jmp     _cc_action
L020E:	tax
	lda     #$02
	jsr     _cc_accept
	stx     tmp1
	ora     tmp1
	jne     _cc_quit
	lda     #$02
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_eol (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_eol: near

.segment	"CODE"

	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cc_quit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_quit: near

.segment	"CODE"

	lda     #$0D
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_item_name (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_item_name: near

.segment	"CODE"

	ldx     #$00
	lda     #$07
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0148
	jsr     _cc_concat_word_reg
	ldx     #$00
	lda     #$07
	jsr     _cc_accept
	jmp     _cc_item_name
L0148:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cc_item (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_item: near

.segment	"CODE"

	ldx     #$00
	lda     #$07
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0150
	ldx     #$00
	lda     #$05
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0153
	lda     #<(L0157)
	ldx     #>(L0157)
	jsr     pushax
	ldy     #$02
	jsr     _cprintf
L0153:	ldx     #$00
	lda     #$05
	jsr     _cc_accept
	jsr     _cc_word
	jsr     _cc_item_name
	jmp     _cc_push_to_cc_word_reg
L0150:	lda     #$05
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_word (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_word: near

.segment	"CODE"

	ldx     #$00
	lda     #$07
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L013D
	jsr     _cc_set_word_reg
	ldx     #$00
	lda     #$07
	jmp     _cc_accept
L013D:	lda     #$03
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_error (int, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_error: near

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	lda     #$01
	sta     _ERR
	stx     _ERR+1
	ldy     #$05
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _create_error
	jsr     _cc_readtok
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ cc_peek (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_peek: near

.segment	"CODE"

	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     ldaxi
	ldy     #$00
	cmp     (sp),y
	bne     L0099
	txa
	iny
	cmp     (sp),y
	bne     L0099
	ldx     #$00
	tya
	jmp     incsp2
L0099:	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ cc_accept (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_accept: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L00A4
	jsr     _cc_readtok
	ldx     #$00
	lda     #$01
	jmp     incsp2
L00A4:	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ cc_acceptVal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_acceptVal: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _cc_peekVal
	stx     tmp1
	ora     tmp1
	beq     L00AB
	jsr     _cc_readtok
	ldx     #$00
	lda     #$01
	jmp     incsp2
L00AB:	tax
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cc_readtok (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_readtok: near

.segment	"CODE"

	lda     _tokenList
	ldx     _tokenList+1
	ldy     #$1B
	jsr     ldaxidx
	sta     _tokenList
	stx     _tokenList+1
	lda     _cc_counter
	ldx     _cc_counter+1
	jsr     incax1
	sta     _cc_counter
	stx     _cc_counter+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ free_parser (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_free_parser: near

.segment	"CODE"

	jsr     decsp4
	lda     _instructionList
	ora     _instructionList+1
	bne     L02DE
	jmp     incsp4
L02DE:	lda     _instructionList
	ldx     _instructionList+1
	ldy     #$43
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     decsp4
	lda     _instructionList
	ldx     _instructionList+1
	jmp     L02D7
L02CF:	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     decsp2
	lda     _instructionList
	ldx     _instructionList+1
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cpx     _instructionList+1
	bne     L0253
	cmp     _instructionList
	bne     L0253
	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	cpx     #$00
	bne     L02D1
	cmp     #$00
	beq     L024C
L02D1:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jmp     L02DB
L024C:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
L02DB:	jsr     ldaxidx
	jsr     stax0sp
L0253:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	cpx     #$00
	bne     L02D2
	cmp     #$00
	beq     L0257
L02D2:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	ldy     #$44
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
L0257:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	cpx     #$00
	bne     L02D3
	cmp     #$00
	beq     L025F
L02D3:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	ldy     #$42
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
L025F:	jsr     ldax0sp
	sta     _instructionList
	stx     _instructionList+1
	jsr     incsp2
	jsr     ldax0sp
	jsr     _free
	ldy     #$03
	jsr     ldaxysp
L02D7:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L02CF
	jsr     incsp4
	jsr     decsp4
	ldy     #$07
	jmp     L02DC
L02D0:	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	jsr     decsp2
	lda     _instructionList
	ldx     _instructionList+1
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	cpx     _instructionList+1
	bne     L0289
	cmp     _instructionList
	bne     L0289
	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	cpx     #$00
	bne     L02D4
	cmp     #$00
	beq     L0282
L02D4:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jmp     L02DD
L0282:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
L02DD:	jsr     ldaxidx
	jsr     stax0sp
L0289:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	cpx     #$00
	bne     L02D5
	cmp     #$00
	beq     L028D
L02D5:	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	ldy     #$44
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
L028D:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	cpx     #$00
	bne     L02D6
	cmp     #$00
	beq     L0295
L02D6:	ldy     #$03
	jsr     ldaxysp
	ldy     #$45
	jsr     ldaxidx
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$43
	jsr     ldaxidx
	ldy     #$42
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
L0295:	jsr     ldax0sp
	sta     _instructionList
	stx     _instructionList+1
	jsr     incsp2
	jsr     ldax0sp
	jsr     _free
	ldy     #$03
L02DC:	jsr     ldaxysp
	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L02D0
	jsr     incsp4
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ parse (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_parse: near

.segment	"CODE"

	lda     _tokenList
	ldx     _tokenList+1
	jsr     pushax
	lda     #$00
	sta     _ERR
	sta     _ERR+1
	sta     _cc_counter
	sta     _cc_counter+1
	lda     _instructionList
	sta     _lastInstruction
	lda     _instructionList+1
	sta     _lastInstruction+1
	jmp     L02AF
L02AD:	jsr     _cc_commands
L02AF:	lda     _tokenList
	ora     _tokenList+1
	beq     L02DF
	ldx     #$00
	lda     #$09
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	bne     L02DF
	lda     _ERR
	ora     _ERR+1
	beq     L02AD
L02DF:	jsr     ldax0sp
	sta     _tokenList
	stx     _tokenList+1
	lda     _ERR
	ldx     _ERR+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cc_set_action_reg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_set_action_reg: near

.segment	"CODE"

	ldy     #$17
	lda     #$00
L0054:	sta     _cc_action_reg,y
	dey
	bpl     L0054
	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _strcpy

.endproc

; ---------------------------------------------------------------
; void __near__ cc_concat_action_reg (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_concat_action_reg: near

.segment	"CODE"

	jsr     pushax
	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcat
	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jsr     _strcat
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cc_concat_word_reg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_concat_word_reg: near

.segment	"CODE"

	lda     #<(_cc_word_reg)
	ldx     #>(_cc_word_reg)
	jsr     pushax
	lda     #<(L006B)
	ldx     #>(L006B)
	jsr     _strcat
	lda     #<(_cc_word_reg)
	ldx     #>(_cc_word_reg)
	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _strcat

.endproc

; ---------------------------------------------------------------
; void __near__ cc_convertSpecialVariable (__near__ unsigned char *, __near__ unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_convertSpecialVariable: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L008D
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L0082
	ldy     #$09
	jsr     pushwysp
	lda     #<(L0087)
	ldx     #>(L0087)
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     _replace_str
	jsr     stax0sp
	ldy     #$09
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcpy
L0082:	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L008D
	ldy     #$09
	jsr     pushwysp
	lda     #<(L0092)
	ldx     #>(L0092)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _replace_str
	jsr     stax0sp
	ldy     #$09
	jsr     pushwysp
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcpy
L008D:	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ cc_peekVal (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_peekVal: near

.segment	"CODE"

	jsr     pushax
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _strcmp
	cpx     #$00
	bne     L00A2
	cmp     #$00
L00A2:	jsr     booleq
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ cc_location_name (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_location_name: near

.segment	"CODE"

	jmp     _cc_item

.endproc

; ---------------------------------------------------------------
; void __near__ cc_preposition (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_preposition: near

.segment	"CODE"

	ldx     #$00
	lda     #$06
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0165
	lda     #<(L0169)
	ldx     #>(L0169)
	jsr     _cc_concat_action_reg
	ldx     #$00
	lda     #$06
	jmp     _cc_accept
L0165:	lda     #$06
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_conjunction (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_conjunction: near

.segment	"CODE"

	ldx     #$00
	lda     #$03
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0172
	lda     #<(L0176)
	ldx     #>(L0176)
	jsr     _cc_concat_action_reg
	ldx     #$00
	lda     #$03
	jmp     _cc_accept
L0172:	lda     #$09
	jsr     pusha0
	lda     _tokenList
	ldx     _tokenList+1
	jsr     incax2
	jmp     _cc_error

.endproc

; ---------------------------------------------------------------
; void __near__ cc_verb_intrans (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_verb_intrans: near

.segment	"CODE"

	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cc_verb_monotrans (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_verb_monotrans: near

.segment	"CODE"

	jsr     _cc_item
	ldx     #$00
	lda     #$03
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0181
	jsr     _cc_conjunction
	jmp     _cc_item
L0181:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cc_verb_ditrans (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_verb_ditrans: near

.segment	"CODE"

	jsr     _cc_item
	jsr     _cc_preposition
	jmp     _cc_item

.endproc

; ---------------------------------------------------------------
; void __near__ cc_action (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cc_action: near

.segment	"CODE"

	jsr     pusha
	lda     _tokenList
	ldx     _tokenList+1
	jsr     pushax
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     pusha
	jsr     _cc_set_action_reg
	ldx     #$00
	txa
	jsr     _cc_accept
	ldx     #$00
	lda     #$01
	jsr     _cc_peek
	stx     tmp1
	ora     tmp1
	beq     L0193
	lda     #<(L0197)
	ldx     #>(L0197)
	jsr     _cc_concat_action_reg
	ldx     #$00
	lda     #$01
	jsr     _cc_accept
	ldy     #$09
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
L0193:	ldy     #$09
	lda     (sp),y
	beq     L01A0
	cmp     #$01
	beq     L01A3
	cmp     #$02
	beq     L01A6
	jmp     L02E3
L01A0:	jsr     _cc_verb_intrans
	jmp     L019E
L01A3:	jsr     _cc_verb_monotrans
	jmp     L019E
L01A6:	jsr     _cc_verb_ditrans
	jmp     L019E
L02E3:	lda     #$0A
	jsr     pusha0
	tay
	jsr     ldaxysp
	jsr     incax2
	jsr     _cc_error
L019E:	jsr     decsp6
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	ldy     #$04
	jsr     staxysp
	ldx     #$00
	txa
	tay
	jmp     L02E0
L02E4:	jsr     ldaxysp
	ldy     #$21
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$20
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$05
	jsr     ldaxysp
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	ldy     #$04
L02E0:	jsr     staxysp
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L02E4
	jsr     ldax0sp
	sta     _cc_stack_names
	stx     _cc_stack_names+1
	jsr     incsp6
	jsr     decsp2
	lda     #$00
	ldy     #$02
	sta     (sp),y
	jsr     decsp4
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	jmp     L02EC
L02E5:	jsr     ldaxysp
	ldy     #$21
	jsr     ldaxidx
	ldy     #$02
	jsr     staxysp
	ldy     #$06
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	ldy     #$03
	jsr     ldaxysp
L02EC:	jsr     stax0sp
	ldy     #$00
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L02E5
	jsr     incsp4
	jsr     incsp2
	ldy     #$09
	lda     (sp),y
	beq     L01D6
	ldy     #$00
	lda     (sp),y
	beq     L01D6
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	jsr     _findItemByName
	ldy     #$01
	jsr     staxysp
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	jsr     _findLocationByName
	ldy     #$03
	jsr     staxysp
	ldy     #$01
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L02EE
	iny
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L02EE
	jmp     L02E9
L02EE:	ldy     #$04
	jsr     pushwysp
	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     _findActionByNameAndItem
	ldy     #$05
	jsr     staxysp
	cpx     #$00
	bne     L01F3
	cmp     #$00
	bne     L01F3
	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     _findDefaultActionByName
	jmp     L02ED
L02E9:	lda     #$05
	jsr     pusha0
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	jsr     _cc_error
	jmp     L01F3
L01D6:	lda     #<(_cc_action_reg)
	ldx     #>(_cc_action_reg)
	jsr     _findActionByName
L02ED:	ldy     #$05
	jsr     staxysp
L01F3:	ldy     #$05
	lda     (sp),y
	iny
	ora     (sp),y
	beq     L01F7
	jsr     ldaxysp
	ldy     #$24
	jsr     pushwidx
	lda     _lastInstruction
	ldx     _lastInstruction+1
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	beq     L0201
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
L0201:	jsr     pushax
	ldy     #$06
	lda     (sp),y
	cmp     #$02
	lda     #$00
	tax
	bcc     L0206
	lda     _cc_stack_names
	ldx     _cc_stack_names+1
	ldy     #$21
	jsr     ldaxidx
L0206:	jsr     _cc_push_instructions
	sta     _lastInstruction
	stx     _lastInstruction+1
	jmp     L0208
L01F7:	lda     #$0A
	jsr     pusha0
	tay
	jsr     ldaxysp
	jsr     incax2
	jsr     _cc_error
L0208:	ldy     #$0A
	jmp     addysp

.endproc

